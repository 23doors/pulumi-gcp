// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class RouterPeer extends lumi.NamedResource implements RouterPeerArgs {
    public readonly advertisedRoutePriority?: number;
    public readonly interface: string;
    public /*out*/ readonly ipAddress: string;
    public readonly routerPeerName?: string;
    public readonly peerAsn: number;
    public readonly peerIpAddress?: string;
    public readonly project: string;
    public readonly region: string;
    public readonly router: string;

    constructor(name: string, args: RouterPeerArgs) {
        super(name);
        this.advertisedRoutePriority = args.advertisedRoutePriority;
        if (lumirt.defaultIfComputed(args.interface, "") === undefined) {
            throw new Error("Property argument 'interface' is required, but was missing");
        }
        this.interface = args.interface;
        this.routerPeerName = args.routerPeerName;
        if (lumirt.defaultIfComputed(args.peerAsn, "") === undefined) {
            throw new Error("Property argument 'peerAsn' is required, but was missing");
        }
        this.peerAsn = args.peerAsn;
        this.peerIpAddress = args.peerIpAddress;
        this.project = args.project;
        this.region = args.region;
        if (lumirt.defaultIfComputed(args.router, "") === undefined) {
            throw new Error("Property argument 'router' is required, but was missing");
        }
        this.router = args.router;
    }
}

export interface RouterPeerArgs {
    readonly advertisedRoutePriority?: number;
    readonly interface: string;
    readonly routerPeerName?: string;
    readonly peerAsn: number;
    readonly peerIpAddress?: string;
    readonly project?: string;
    readonly region?: string;
    readonly router: string;
}

