// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Snapshot extends lumi.NamedResource implements SnapshotArgs {
    public readonly snapshotName?: string;
    public readonly project?: string;
    public /*out*/ readonly selfLink: string;
    public readonly snapshotEncryptionKeyRaw?: string;
    public /*out*/ readonly snapshotEncryptionKeySha256: string;
    public readonly sourceDisk: string;
    public readonly sourceDiskEncryptionKeyRaw?: string;
    public /*out*/ readonly sourceDiskEncryptionKeySha256: string;
    public /*out*/ readonly sourceDiskLink: string;
    public readonly zone: string;

    constructor(name: string, args: SnapshotArgs) {
        super(name);
        this.snapshotName = args.snapshotName;
        this.project = args.project;
        this.snapshotEncryptionKeyRaw = args.snapshotEncryptionKeyRaw;
        if (lumirt.defaultIfComputed(args.sourceDisk, "") === undefined) {
            throw new Error("Property argument 'sourceDisk' is required, but was missing");
        }
        this.sourceDisk = args.sourceDisk;
        this.sourceDiskEncryptionKeyRaw = args.sourceDiskEncryptionKeyRaw;
        if (lumirt.defaultIfComputed(args.zone, "") === undefined) {
            throw new Error("Property argument 'zone' is required, but was missing");
        }
        this.zone = args.zone;
    }
}

export interface SnapshotArgs {
    readonly snapshotName?: string;
    readonly project?: string;
    readonly snapshotEncryptionKeyRaw?: string;
    readonly sourceDisk: string;
    readonly sourceDiskEncryptionKeyRaw?: string;
    readonly zone: string;
}

