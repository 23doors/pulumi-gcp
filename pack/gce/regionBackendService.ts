// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class RegionBackendService extends lumi.NamedResource implements RegionBackendServiceArgs {
    public readonly backend?: { description?: string, group?: string }[];
    public readonly connectionDrainingTimeoutSec?: number;
    public readonly description?: string;
    public /*out*/ readonly fingerprint: string;
    public readonly healthChecks: string[];
    public readonly regionBackendServiceName?: string;
    public readonly project?: string;
    public readonly protocol: string;
    public readonly region?: string;
    public /*out*/ readonly selfLink: string;
    public readonly sessionAffinity: string;
    public readonly timeoutSec: number;

    constructor(name: string, args: RegionBackendServiceArgs) {
        super(name);
        this.backend = args.backend;
        this.connectionDrainingTimeoutSec = args.connectionDrainingTimeoutSec;
        this.description = args.description;
        if (lumirt.defaultIfComputed(args.healthChecks, "") === undefined) {
            throw new Error("Property argument 'healthChecks' is required, but was missing");
        }
        this.healthChecks = args.healthChecks;
        this.regionBackendServiceName = args.regionBackendServiceName;
        this.project = args.project;
        this.protocol = args.protocol;
        this.region = args.region;
        this.sessionAffinity = args.sessionAffinity;
        this.timeoutSec = args.timeoutSec;
    }
}

export interface RegionBackendServiceArgs {
    readonly backend?: { description?: string, group?: string }[];
    readonly connectionDrainingTimeoutSec?: number;
    readonly description?: string;
    readonly healthChecks: string[];
    readonly regionBackendServiceName?: string;
    readonly project?: string;
    readonly protocol?: string;
    readonly region?: string;
    readonly sessionAffinity?: string;
    readonly timeoutSec?: number;
}

