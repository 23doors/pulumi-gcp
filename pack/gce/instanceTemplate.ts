// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class InstanceTemplate extends lumi.NamedResource implements InstanceTemplateArgs {
    public readonly automaticRestart?: boolean;
    public readonly canIpForward?: boolean;
    public readonly description?: string;
    public readonly disk: { autoDelete?: boolean, boot: boolean, deviceName?: string, diskName?: string, diskSizeGb?: number, diskType: string, interface: string, mode: string, source?: string, sourceImage?: string, type: string }[];
    public readonly instanceDescription?: string;
    public readonly machineType: string;
    public readonly metadata?: {[key: string]: any};
    public /*out*/ readonly metadataFingerprint: string;
    public readonly metadataStartupScript?: string;
    public readonly instanceTemplateName: string;
    public readonly namePrefix?: string;
    public readonly networkInterface?: { accessConfig?: { natIp: string }[], network: string, networkIp?: string, subnetwork?: string, subnetworkProject: string }[];
    public readonly onHostMaintenance?: string;
    public readonly project: string;
    public readonly region?: string;
    public readonly scheduling: { automaticRestart?: boolean, onHostMaintenance: string, preemptible?: boolean }[];
    public /*out*/ readonly selfLink: string;
    public readonly serviceAccount?: { email: string, scopes: string[] }[];
    public readonly tags?: string[];
    public /*out*/ readonly tagsFingerprint: string;

    constructor(name: string, args: InstanceTemplateArgs) {
        super(name);
        this.automaticRestart = args.automaticRestart;
        this.canIpForward = args.canIpForward;
        this.description = args.description;
        if (lumirt.defaultIfComputed(args.disk, "") === undefined) {
            throw new Error("Property argument 'disk' is required, but was missing");
        }
        this.disk = args.disk;
        this.instanceDescription = args.instanceDescription;
        if (lumirt.defaultIfComputed(args.machineType, "") === undefined) {
            throw new Error("Property argument 'machineType' is required, but was missing");
        }
        this.machineType = args.machineType;
        this.metadata = args.metadata;
        this.metadataStartupScript = args.metadataStartupScript;
        this.instanceTemplateName = args.instanceTemplateName;
        this.namePrefix = args.namePrefix;
        this.networkInterface = args.networkInterface;
        this.onHostMaintenance = args.onHostMaintenance;
        this.project = args.project;
        this.region = args.region;
        this.scheduling = args.scheduling;
        this.serviceAccount = args.serviceAccount;
        this.tags = args.tags;
    }
}

export interface InstanceTemplateArgs {
    readonly automaticRestart?: boolean;
    readonly canIpForward?: boolean;
    readonly description?: string;
    readonly disk: { autoDelete?: boolean, boot: boolean, deviceName?: string, diskName?: string, diskSizeGb?: number, diskType: string, interface: string, mode: string, source?: string, sourceImage?: string, type: string }[];
    readonly instanceDescription?: string;
    readonly machineType: string;
    readonly metadata?: {[key: string]: any};
    readonly metadataStartupScript?: string;
    readonly instanceTemplateName?: string;
    readonly namePrefix?: string;
    readonly networkInterface?: { accessConfig?: { natIp: string }[], network: string, networkIp?: string, subnetwork?: string, subnetworkProject: string }[];
    readonly onHostMaintenance?: string;
    readonly project?: string;
    readonly region?: string;
    readonly scheduling?: { automaticRestart?: boolean, onHostMaintenance: string, preemptible?: boolean }[];
    readonly serviceAccount?: { email: string, scopes: string[] }[];
    readonly tags?: string[];
}

