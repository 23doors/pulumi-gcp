// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Disk extends lumi.NamedResource implements DiskArgs {
    public readonly diskEncryptionKeyRaw?: string;
    public /*out*/ readonly diskEncryptionKeySha256: string;
    public readonly image?: string;
    public readonly diskName?: string;
    public readonly project?: string;
    public /*out*/ readonly selfLink: string;
    public readonly size: number;
    public readonly snapshot?: string;
    public readonly type?: string;
    public /*out*/ readonly users: string[];
    public readonly zone: string;

    constructor(name: string, args: DiskArgs) {
        super(name);
        this.diskEncryptionKeyRaw = args.diskEncryptionKeyRaw;
        this.image = args.image;
        this.diskName = args.diskName;
        this.project = args.project;
        this.size = args.size;
        this.snapshot = args.snapshot;
        this.type = args.type;
        if (lumirt.defaultIfComputed(args.zone, "") === undefined) {
            throw new Error("Property argument 'zone' is required, but was missing");
        }
        this.zone = args.zone;
    }
}

export interface DiskArgs {
    readonly diskEncryptionKeyRaw?: string;
    readonly image?: string;
    readonly diskName?: string;
    readonly project?: string;
    readonly size?: number;
    readonly snapshot?: string;
    readonly type?: string;
    readonly zone: string;
}

