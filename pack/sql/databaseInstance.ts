// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class DatabaseInstance extends lumi.NamedResource implements DatabaseInstanceArgs {
    public readonly databaseVersion?: string;
    public /*out*/ readonly ipAddress: { ipAddress: string, timeToRetire: string }[];
    public readonly masterInstanceName: string;
    public readonly databaseInstanceName: string;
    public readonly project?: string;
    public readonly region: string;
    public readonly replicaConfiguration?: { caCertificate?: string, clientCertificate?: string, clientKey?: string, connectRetryInterval?: number, dumpFilePath?: string, failoverTarget?: boolean, masterHeartbeatPeriod?: number, password?: string, sslCipher?: string, username?: string, verifyServerCertificate?: boolean }[];
    public /*out*/ readonly selfLink: string;
    public readonly settings: { activationPolicy?: string, authorizedGaeApplications?: string[], backupConfiguration?: { binaryLogEnabled?: boolean, enabled?: boolean, startTime?: string }[], crashSafeReplication: boolean, databaseFlags?: { name?: string, value?: string }[], diskAutoresize?: boolean, diskSize?: number, diskType?: string, ipConfiguration?: { authorizedNetworks?: { expirationTime?: string, name?: string, value?: string }[], ipv4Enabled?: boolean, requireSsl?: boolean }[], locationPreference?: { followGaeApplication?: string, zone?: string }[], maintenanceWindow?: { day?: number, hour?: number, updateTrack?: string }[], pricingPlan?: string, replicationType?: string, tier: string, version: number }[];

    constructor(name: string, args: DatabaseInstanceArgs) {
        super(name);
        this.databaseVersion = args.databaseVersion;
        this.masterInstanceName = args.masterInstanceName;
        this.databaseInstanceName = args.databaseInstanceName;
        this.project = args.project;
        if (lumirt.defaultIfComputed(args.region, "") === undefined) {
            throw new Error("Property argument 'region' is required, but was missing");
        }
        this.region = args.region;
        this.replicaConfiguration = args.replicaConfiguration;
        if (lumirt.defaultIfComputed(args.settings, "") === undefined) {
            throw new Error("Property argument 'settings' is required, but was missing");
        }
        this.settings = args.settings;
    }
}

export interface DatabaseInstanceArgs {
    readonly databaseVersion?: string;
    readonly masterInstanceName?: string;
    readonly databaseInstanceName?: string;
    readonly project?: string;
    readonly region: string;
    readonly replicaConfiguration?: { caCertificate?: string, clientCertificate?: string, clientKey?: string, connectRetryInterval?: number, dumpFilePath?: string, failoverTarget?: boolean, masterHeartbeatPeriod?: number, password?: string, sslCipher?: string, username?: string, verifyServerCertificate?: boolean }[];
    readonly settings: { activationPolicy?: string, authorizedGaeApplications?: string[], backupConfiguration?: { binaryLogEnabled?: boolean, enabled?: boolean, startTime?: string }[], crashSafeReplication: boolean, databaseFlags?: { name?: string, value?: string }[], diskAutoresize?: boolean, diskSize?: number, diskType?: string, ipConfiguration?: { authorizedNetworks?: { expirationTime?: string, name?: string, value?: string }[], ipv4Enabled?: boolean, requireSsl?: boolean }[], locationPreference?: { followGaeApplication?: string, zone?: string }[], maintenanceWindow?: { day?: number, hour?: number, updateTrack?: string }[], pricingPlan?: string, replicationType?: string, tier: string, version: number }[];
}

