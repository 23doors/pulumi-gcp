// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Table extends lumi.NamedResource implements TableArgs {
    public /*out*/ readonly creationTime: number;
    public readonly datasetId: string;
    public readonly description?: string;
    public /*out*/ readonly etag: string;
    public readonly expirationTime: number;
    public readonly friendlyName?: string;
    public readonly labels?: {[key: string]: string};
    public /*out*/ readonly lastModifiedTime: number;
    public /*out*/ readonly location: string;
    public /*out*/ readonly numBytes: number;
    public /*out*/ readonly numLongTermBytes: number;
    public /*out*/ readonly numRows: number;
    public readonly project?: string;
    public readonly schema: string;
    public /*out*/ readonly selfLink: string;
    public readonly tableId: string;
    public readonly timePartitioning?: { expirationMs?: number, type: string }[];
    public /*out*/ readonly type: string;

    constructor(name: string, args: TableArgs) {
        super(name);
        if (lumirt.defaultIfComputed(args.datasetId, "") === undefined) {
            throw new Error("Property argument 'datasetId' is required, but was missing");
        }
        this.datasetId = args.datasetId;
        this.description = args.description;
        this.expirationTime = args.expirationTime;
        this.friendlyName = args.friendlyName;
        this.labels = args.labels;
        this.project = args.project;
        this.schema = args.schema;
        if (lumirt.defaultIfComputed(args.tableId, "") === undefined) {
            throw new Error("Property argument 'tableId' is required, but was missing");
        }
        this.tableId = args.tableId;
        this.timePartitioning = args.timePartitioning;
    }
}

export interface TableArgs {
    readonly datasetId: string;
    readonly description?: string;
    readonly expirationTime?: number;
    readonly friendlyName?: string;
    readonly labels?: {[key: string]: string};
    readonly project?: string;
    readonly schema?: string;
    readonly tableId: string;
    readonly timePartitioning?: { expirationMs?: number, type: string }[];
}

