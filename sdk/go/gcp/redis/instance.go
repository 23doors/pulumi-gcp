// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/redis_instance.html.markdown.
type Instance struct {
	s *pulumi.ResourceState
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOpt) (*Instance, error) {
	if args == nil || args.MemorySizeGb == nil {
		return nil, errors.New("missing required argument 'MemorySizeGb'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["alternativeLocationId"] = nil
		inputs["authorizedNetwork"] = nil
		inputs["displayName"] = nil
		inputs["labels"] = nil
		inputs["locationId"] = nil
		inputs["memorySizeGb"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
		inputs["redisConfigs"] = nil
		inputs["redisVersion"] = nil
		inputs["region"] = nil
		inputs["reservedIpRange"] = nil
		inputs["tier"] = nil
	} else {
		inputs["alternativeLocationId"] = args.AlternativeLocationId
		inputs["authorizedNetwork"] = args.AuthorizedNetwork
		inputs["displayName"] = args.DisplayName
		inputs["labels"] = args.Labels
		inputs["locationId"] = args.LocationId
		inputs["memorySizeGb"] = args.MemorySizeGb
		inputs["name"] = args.Name
		inputs["project"] = args.Project
		inputs["redisConfigs"] = args.RedisConfigs
		inputs["redisVersion"] = args.RedisVersion
		inputs["region"] = args.Region
		inputs["reservedIpRange"] = args.ReservedIpRange
		inputs["tier"] = args.Tier
	}
	inputs["createTime"] = nil
	inputs["currentLocationId"] = nil
	inputs["host"] = nil
	inputs["port"] = nil
	s, err := ctx.RegisterResource("gcp:redis/instance:Instance", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Instance{s: s}, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.ID, state *InstanceState, opts ...pulumi.ResourceOpt) (*Instance, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["alternativeLocationId"] = state.AlternativeLocationId
		inputs["authorizedNetwork"] = state.AuthorizedNetwork
		inputs["createTime"] = state.CreateTime
		inputs["currentLocationId"] = state.CurrentLocationId
		inputs["displayName"] = state.DisplayName
		inputs["host"] = state.Host
		inputs["labels"] = state.Labels
		inputs["locationId"] = state.LocationId
		inputs["memorySizeGb"] = state.MemorySizeGb
		inputs["name"] = state.Name
		inputs["port"] = state.Port
		inputs["project"] = state.Project
		inputs["redisConfigs"] = state.RedisConfigs
		inputs["redisVersion"] = state.RedisVersion
		inputs["region"] = state.Region
		inputs["reservedIpRange"] = state.ReservedIpRange
		inputs["tier"] = state.Tier
	}
	s, err := ctx.ReadResource("gcp:redis/instance:Instance", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Instance{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Instance) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Instance) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Only applicable to STANDARD_HA tier which protects the instance against zonal failures by provisioning it across two
// zones. If provided, it must be a different zone from the one provided in [locationId].
func (r *Instance) AlternativeLocationId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["alternativeLocationId"])
}

// The full name of the Google Compute Engine network to which the instance is connected. If left unspecified, the default
// network will be used.
func (r *Instance) AuthorizedNetwork() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["authorizedNetwork"])
}

// The time the instance was created in RFC3339 UTC "Zulu" format, accurate to nanoseconds.
func (r *Instance) CreateTime() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["createTime"])
}

// The current zone where the Redis endpoint is placed. For Basic Tier instances, this will always be the same as the
// [locationId] provided by the user at creation time. For Standard Tier instances, this can be either [locationId] or
// [alternativeLocationId] and can change after a failover event.
func (r *Instance) CurrentLocationId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["currentLocationId"])
}

// An arbitrary and optional user-provided name for the instance.
func (r *Instance) DisplayName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["displayName"])
}

// Hostname or IP address of the exposed Redis endpoint used by clients to connect to the service.
func (r *Instance) Host() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["host"])
}

// Resource labels to represent user provided metadata.
func (r *Instance) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// The zone where the instance will be provisioned. If not provided, the service will choose a zone for the instance. For
// STANDARD_HA tier, instances will be created across two zones for protection against zonal failures. If
// [alternativeLocationId] is also provided, it must be different from [locationId].
func (r *Instance) LocationId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["locationId"])
}

// Redis memory size in GiB.
func (r *Instance) MemorySizeGb() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["memorySizeGb"])
}

// The ID of the instance or a fully qualified identifier for the instance.
func (r *Instance) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The port number of the exposed Redis endpoint.
func (r *Instance) Port() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["port"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Instance) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Redis configuration parameters, according to http://redis.io/topics/config. Please check Memorystore documentation for
// the list of supported parameters:
// https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs
func (r *Instance) RedisConfigs() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["redisConfigs"])
}

// The version of Redis software. If not provided, latest supported version will be used. Currently, the supported values
// are: - REDIS_4_0 for Redis 4.0 compatibility - REDIS_3_2 for Redis 3.2 compatibility
func (r *Instance) RedisVersion() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["redisVersion"])
}

// The name of the Redis region of the instance.
func (r *Instance) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// The CIDR range of internal addresses that are reserved for this instance. If not provided, the service will choose an
// unused /29 block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be unique and non-overlapping with existing
// subnets in an authorized network.
func (r *Instance) ReservedIpRange() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["reservedIpRange"])
}

// The service tier of the instance. Must be one of these values: - BASIC: standalone instance - STANDARD_HA: highly
// available primary/replica instances
func (r *Instance) Tier() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tier"])
}

// Input properties used for looking up and filtering Instance resources.
type InstanceState struct {
	// Only applicable to STANDARD_HA tier which protects the instance against zonal failures by provisioning it across two
	// zones. If provided, it must be a different zone from the one provided in [locationId].
	AlternativeLocationId interface{}
	// The full name of the Google Compute Engine network to which the instance is connected. If left unspecified, the default
	// network will be used.
	AuthorizedNetwork interface{}
	// The time the instance was created in RFC3339 UTC "Zulu" format, accurate to nanoseconds.
	CreateTime interface{}
	// The current zone where the Redis endpoint is placed. For Basic Tier instances, this will always be the same as the
	// [locationId] provided by the user at creation time. For Standard Tier instances, this can be either [locationId] or
	// [alternativeLocationId] and can change after a failover event.
	CurrentLocationId interface{}
	// An arbitrary and optional user-provided name for the instance.
	DisplayName interface{}
	// Hostname or IP address of the exposed Redis endpoint used by clients to connect to the service.
	Host interface{}
	// Resource labels to represent user provided metadata.
	Labels interface{}
	// The zone where the instance will be provisioned. If not provided, the service will choose a zone for the instance. For
	// STANDARD_HA tier, instances will be created across two zones for protection against zonal failures. If
	// [alternativeLocationId] is also provided, it must be different from [locationId].
	LocationId interface{}
	// Redis memory size in GiB.
	MemorySizeGb interface{}
	// The ID of the instance or a fully qualified identifier for the instance.
	Name interface{}
	// The port number of the exposed Redis endpoint.
	Port interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// Redis configuration parameters, according to http://redis.io/topics/config. Please check Memorystore documentation for
	// the list of supported parameters:
	// https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs
	RedisConfigs interface{}
	// The version of Redis software. If not provided, latest supported version will be used. Currently, the supported values
	// are: - REDIS_4_0 for Redis 4.0 compatibility - REDIS_3_2 for Redis 3.2 compatibility
	RedisVersion interface{}
	// The name of the Redis region of the instance.
	Region interface{}
	// The CIDR range of internal addresses that are reserved for this instance. If not provided, the service will choose an
	// unused /29 block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be unique and non-overlapping with existing
	// subnets in an authorized network.
	ReservedIpRange interface{}
	// The service tier of the instance. Must be one of these values: - BASIC: standalone instance - STANDARD_HA: highly
	// available primary/replica instances
	Tier interface{}
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Only applicable to STANDARD_HA tier which protects the instance against zonal failures by provisioning it across two
	// zones. If provided, it must be a different zone from the one provided in [locationId].
	AlternativeLocationId interface{}
	// The full name of the Google Compute Engine network to which the instance is connected. If left unspecified, the default
	// network will be used.
	AuthorizedNetwork interface{}
	// An arbitrary and optional user-provided name for the instance.
	DisplayName interface{}
	// Resource labels to represent user provided metadata.
	Labels interface{}
	// The zone where the instance will be provisioned. If not provided, the service will choose a zone for the instance. For
	// STANDARD_HA tier, instances will be created across two zones for protection against zonal failures. If
	// [alternativeLocationId] is also provided, it must be different from [locationId].
	LocationId interface{}
	// Redis memory size in GiB.
	MemorySizeGb interface{}
	// The ID of the instance or a fully qualified identifier for the instance.
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// Redis configuration parameters, according to http://redis.io/topics/config. Please check Memorystore documentation for
	// the list of supported parameters:
	// https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs
	RedisConfigs interface{}
	// The version of Redis software. If not provided, latest supported version will be used. Currently, the supported values
	// are: - REDIS_4_0 for Redis 4.0 compatibility - REDIS_3_2 for Redis 3.2 compatibility
	RedisVersion interface{}
	// The name of the Redis region of the instance.
	Region interface{}
	// The CIDR range of internal addresses that are reserved for this instance. If not provided, the service will choose an
	// unused /29 block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be unique and non-overlapping with existing
	// subnets in an authorized network.
	ReservedIpRange interface{}
	// The service tier of the instance. Must be one of these values: - BASIC: standalone instance - STANDARD_HA: highly
	// available primary/replica instances
	Tier interface{}
}
