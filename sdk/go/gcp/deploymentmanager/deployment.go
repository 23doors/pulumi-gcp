// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package deploymentmanager

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/deployment_manager_deployment.html.markdown.
type Deployment struct {
	s *pulumi.ResourceState
}

// NewDeployment registers a new resource with the given unique name, arguments, and options.
func NewDeployment(ctx *pulumi.Context,
	name string, args *DeploymentArgs, opts ...pulumi.ResourceOpt) (*Deployment, error) {
	if args == nil || args.Target == nil {
		return nil, errors.New("missing required argument 'Target'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["createPolicy"] = nil
		inputs["deletePolicy"] = nil
		inputs["description"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["preview"] = nil
		inputs["project"] = nil
		inputs["target"] = nil
	} else {
		inputs["createPolicy"] = args.CreatePolicy
		inputs["deletePolicy"] = args.DeletePolicy
		inputs["description"] = args.Description
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["preview"] = args.Preview
		inputs["project"] = args.Project
		inputs["target"] = args.Target
	}
	inputs["deploymentId"] = nil
	inputs["manifest"] = nil
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:deploymentmanager/deployment:Deployment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Deployment{s: s}, nil
}

// GetDeployment gets an existing Deployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DeploymentState, opts ...pulumi.ResourceOpt) (*Deployment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["createPolicy"] = state.CreatePolicy
		inputs["deletePolicy"] = state.DeletePolicy
		inputs["deploymentId"] = state.DeploymentId
		inputs["description"] = state.Description
		inputs["labels"] = state.Labels
		inputs["manifest"] = state.Manifest
		inputs["name"] = state.Name
		inputs["preview"] = state.Preview
		inputs["project"] = state.Project
		inputs["selfLink"] = state.SelfLink
		inputs["target"] = state.Target
	}
	s, err := ctx.ReadResource("gcp:deploymentmanager/deployment:Deployment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Deployment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Deployment) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Deployment) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Set the policy to use for creating new resources. Only used on create and update. Valid values are 'CREATE_OR_ACQUIRE'
// (default) or 'ACQUIRE'. If set to 'ACQUIRE' and resources do not already exist, the deployment will fail. Note that
// updating this field does not actually affect the deployment, just how it is updated.
func (r *Deployment) CreatePolicy() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["createPolicy"])
}

// Set the policy to use for deleting new resources on update/delete. Valid values are 'DELETE' (default) or 'ABANDON'. If
// 'DELETE', resource is deleted after removal from Deployment Manager. If 'ABANDON', the resource is only removed from
// Deployment Manager and is not actually deleted. Note that updating this field does not actually change the deployment,
// just how it is updated.
func (r *Deployment) DeletePolicy() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["deletePolicy"])
}

// Unique identifier for deployment. Output only.
func (r *Deployment) DeploymentId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["deploymentId"])
}

// Optional user-provided description of deployment.
func (r *Deployment) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Key-value pairs to apply to this labels.
func (r *Deployment) Labels() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["labels"])
}

// Output only. URL of the manifest representing the last manifest that was successfully deployed.
func (r *Deployment) Manifest() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["manifest"])
}

// Unique name for the deployment
func (r *Deployment) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// If set to true, a deployment is created with "shell" resources that are not actually instantiated. This allows you to
// preview a deployment. It can be updated to false to actually deploy with real resources. ~>**NOTE**: Deployment Manager
// does not allow update of a deployment in preview (unless updating to preview=false). Thus, Terraform will force-recreate
// deployments if either preview is updated to true or if other fields are updated while preview is true.
func (r *Deployment) Preview() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["preview"])
}

func (r *Deployment) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Output only. Server defined URL for the resource.
func (r *Deployment) SelfLink() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["selfLink"])
}

// Parameters that define your deployment, including the deployment configuration and relevant templates.
func (r *Deployment) Target() pulumi.Output {
	return r.s.State["target"]
}

// Input properties used for looking up and filtering Deployment resources.
type DeploymentState struct {
	// Set the policy to use for creating new resources. Only used on create and update. Valid values are 'CREATE_OR_ACQUIRE'
	// (default) or 'ACQUIRE'. If set to 'ACQUIRE' and resources do not already exist, the deployment will fail. Note that
	// updating this field does not actually affect the deployment, just how it is updated.
	CreatePolicy interface{}
	// Set the policy to use for deleting new resources on update/delete. Valid values are 'DELETE' (default) or 'ABANDON'. If
	// 'DELETE', resource is deleted after removal from Deployment Manager. If 'ABANDON', the resource is only removed from
	// Deployment Manager and is not actually deleted. Note that updating this field does not actually change the deployment,
	// just how it is updated.
	DeletePolicy interface{}
	// Unique identifier for deployment. Output only.
	DeploymentId interface{}
	// Optional user-provided description of deployment.
	Description interface{}
	// Key-value pairs to apply to this labels.
	Labels interface{}
	// Output only. URL of the manifest representing the last manifest that was successfully deployed.
	Manifest interface{}
	// Unique name for the deployment
	Name interface{}
	// If set to true, a deployment is created with "shell" resources that are not actually instantiated. This allows you to
	// preview a deployment. It can be updated to false to actually deploy with real resources. ~>**NOTE**: Deployment Manager
	// does not allow update of a deployment in preview (unless updating to preview=false). Thus, Terraform will
	// force-recreate deployments if either preview is updated to true or if other fields are updated while preview is true.
	Preview interface{}
	Project interface{}
	// Output only. Server defined URL for the resource.
	SelfLink interface{}
	// Parameters that define your deployment, including the deployment configuration and relevant templates.
	Target interface{}
}

// The set of arguments for constructing a Deployment resource.
type DeploymentArgs struct {
	// Set the policy to use for creating new resources. Only used on create and update. Valid values are 'CREATE_OR_ACQUIRE'
	// (default) or 'ACQUIRE'. If set to 'ACQUIRE' and resources do not already exist, the deployment will fail. Note that
	// updating this field does not actually affect the deployment, just how it is updated.
	CreatePolicy interface{}
	// Set the policy to use for deleting new resources on update/delete. Valid values are 'DELETE' (default) or 'ABANDON'. If
	// 'DELETE', resource is deleted after removal from Deployment Manager. If 'ABANDON', the resource is only removed from
	// Deployment Manager and is not actually deleted. Note that updating this field does not actually change the deployment,
	// just how it is updated.
	DeletePolicy interface{}
	// Optional user-provided description of deployment.
	Description interface{}
	// Key-value pairs to apply to this labels.
	Labels interface{}
	// Unique name for the deployment
	Name interface{}
	// If set to true, a deployment is created with "shell" resources that are not actually instantiated. This allows you to
	// preview a deployment. It can be updated to false to actually deploy with real resources. ~>**NOTE**: Deployment Manager
	// does not allow update of a deployment in preview (unless updating to preview=false). Thus, Terraform will
	// force-recreate deployments if either preview is updated to true or if other fields are updated while preview is true.
	Preview interface{}
	Project interface{}
	// Parameters that define your deployment, including the deployment configuration and relevant templates.
	Target interface{}
}
