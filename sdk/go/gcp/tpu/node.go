// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package tpu

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/tpu_node.html.markdown.
type Node struct {
	s *pulumi.ResourceState
}

// NewNode registers a new resource with the given unique name, arguments, and options.
func NewNode(ctx *pulumi.Context,
	name string, args *NodeArgs, opts ...pulumi.ResourceOpt) (*Node, error) {
	if args == nil || args.AcceleratorType == nil {
		return nil, errors.New("missing required argument 'AcceleratorType'")
	}
	if args == nil || args.CidrBlock == nil {
		return nil, errors.New("missing required argument 'CidrBlock'")
	}
	if args == nil || args.TensorflowVersion == nil {
		return nil, errors.New("missing required argument 'TensorflowVersion'")
	}
	if args == nil || args.Zone == nil {
		return nil, errors.New("missing required argument 'Zone'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["acceleratorType"] = nil
		inputs["cidrBlock"] = nil
		inputs["description"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["network"] = nil
		inputs["project"] = nil
		inputs["schedulingConfig"] = nil
		inputs["tensorflowVersion"] = nil
		inputs["zone"] = nil
	} else {
		inputs["acceleratorType"] = args.AcceleratorType
		inputs["cidrBlock"] = args.CidrBlock
		inputs["description"] = args.Description
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["network"] = args.Network
		inputs["project"] = args.Project
		inputs["schedulingConfig"] = args.SchedulingConfig
		inputs["tensorflowVersion"] = args.TensorflowVersion
		inputs["zone"] = args.Zone
	}
	inputs["networkEndpoints"] = nil
	inputs["serviceAccount"] = nil
	s, err := ctx.RegisterResource("gcp:tpu/node:Node", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Node{s: s}, nil
}

// GetNode gets an existing Node resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNode(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NodeState, opts ...pulumi.ResourceOpt) (*Node, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["acceleratorType"] = state.AcceleratorType
		inputs["cidrBlock"] = state.CidrBlock
		inputs["description"] = state.Description
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["network"] = state.Network
		inputs["networkEndpoints"] = state.NetworkEndpoints
		inputs["project"] = state.Project
		inputs["schedulingConfig"] = state.SchedulingConfig
		inputs["serviceAccount"] = state.ServiceAccount
		inputs["tensorflowVersion"] = state.TensorflowVersion
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("gcp:tpu/node:Node", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Node{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Node) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Node) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The type of hardware accelerators associated with this node.
func (r *Node) AcceleratorType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["acceleratorType"])
}

// The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute
// Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP
// address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block
// conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network
// that is using that CIDR block.
func (r *Node) CidrBlock() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["cidrBlock"])
}

// The user-supplied description of the TPU. Maximum of 512 characters.
func (r *Node) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Resource labels to represent user provided metadata.
func (r *Node) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// The immutable name of the TPU.
func (r *Node) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The name of a network to peer the TPU node to. It must be a preexisting Compute Engine network inside of the project on
// which this API has been activated. If none is provided, "default" will be used.
func (r *Node) Network() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["network"])
}

// The network endpoints where TPU workers can be accessed and sent work. It is recommended that Tensorflow clients of the
// node first reach out to the first (index 0) entry.
func (r *Node) NetworkEndpoints() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["networkEndpoints"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Node) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Sets the scheduling options for this TPU instance.
func (r *Node) SchedulingConfig() pulumi.Output {
	return r.s.State["schedulingConfig"]
}

// The service account used to run the tensor flow services within the node. To share resources, including Google Cloud
// Storage data, with the Tensorflow job running in the Node, this account must have permissions to that data.
func (r *Node) ServiceAccount() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serviceAccount"])
}

// The version of Tensorflow running in the Node.
func (r *Node) TensorflowVersion() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tensorflowVersion"])
}

// The GCP location for the TPU.
func (r *Node) Zone() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering Node resources.
type NodeState struct {
	// The type of hardware accelerators associated with this node.
	AcceleratorType interface{}
	// The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the
	// Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only
	// consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node,
	// the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with
	// another network that is using that CIDR block.
	CidrBlock interface{}
	// The user-supplied description of the TPU. Maximum of 512 characters.
	Description interface{}
	// Resource labels to represent user provided metadata.
	Labels interface{}
	// The immutable name of the TPU.
	Name interface{}
	// The name of a network to peer the TPU node to. It must be a preexisting Compute Engine network inside of the project on
	// which this API has been activated. If none is provided, "default" will be used.
	Network interface{}
	// The network endpoints where TPU workers can be accessed and sent work. It is recommended that Tensorflow clients of the
	// node first reach out to the first (index 0) entry.
	NetworkEndpoints interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// Sets the scheduling options for this TPU instance.
	SchedulingConfig interface{}
	// The service account used to run the tensor flow services within the node. To share resources, including Google Cloud
	// Storage data, with the Tensorflow job running in the Node, this account must have permissions to that data.
	ServiceAccount interface{}
	// The version of Tensorflow running in the Node.
	TensorflowVersion interface{}
	// The GCP location for the TPU.
	Zone interface{}
}

// The set of arguments for constructing a Node resource.
type NodeArgs struct {
	// The type of hardware accelerators associated with this node.
	AcceleratorType interface{}
	// The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the
	// Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only
	// consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node,
	// the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with
	// another network that is using that CIDR block.
	CidrBlock interface{}
	// The user-supplied description of the TPU. Maximum of 512 characters.
	Description interface{}
	// Resource labels to represent user provided metadata.
	Labels interface{}
	// The immutable name of the TPU.
	Name interface{}
	// The name of a network to peer the TPU node to. It must be a preexisting Compute Engine network inside of the project on
	// which this API has been activated. If none is provided, "default" will be used.
	Network interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// Sets the scheduling options for this TPU instance.
	SchedulingConfig interface{}
	// The version of Tensorflow running in the Node.
	TensorflowVersion interface{}
	// The GCP location for the TPU.
	Zone interface{}
}
