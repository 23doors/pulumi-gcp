// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/dns_managed_zone.html.markdown.
type ManagedZone struct {
	s *pulumi.ResourceState
}

// NewManagedZone registers a new resource with the given unique name, arguments, and options.
func NewManagedZone(ctx *pulumi.Context,
	name string, args *ManagedZoneArgs, opts ...pulumi.ResourceOpt) (*ManagedZone, error) {
	if args == nil || args.DnsName == nil {
		return nil, errors.New("missing required argument 'DnsName'")
	}
	inputs := make(map[string]interface{})
	inputs["description"] = "Managed by Pulumi"
	if args == nil {
		inputs["dnsName"] = nil
		inputs["dnssecConfig"] = nil
		inputs["forwardingConfig"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["peeringConfig"] = nil
		inputs["privateVisibilityConfig"] = nil
		inputs["project"] = nil
		inputs["visibility"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["dnsName"] = args.DnsName
		inputs["dnssecConfig"] = args.DnssecConfig
		inputs["forwardingConfig"] = args.ForwardingConfig
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["peeringConfig"] = args.PeeringConfig
		inputs["privateVisibilityConfig"] = args.PrivateVisibilityConfig
		inputs["project"] = args.Project
		inputs["visibility"] = args.Visibility
	}
	inputs["nameServers"] = nil
	s, err := ctx.RegisterResource("gcp:dns/managedZone:ManagedZone", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ManagedZone{s: s}, nil
}

// GetManagedZone gets an existing ManagedZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedZone(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ManagedZoneState, opts ...pulumi.ResourceOpt) (*ManagedZone, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["dnsName"] = state.DnsName
		inputs["dnssecConfig"] = state.DnssecConfig
		inputs["forwardingConfig"] = state.ForwardingConfig
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["nameServers"] = state.NameServers
		inputs["peeringConfig"] = state.PeeringConfig
		inputs["privateVisibilityConfig"] = state.PrivateVisibilityConfig
		inputs["project"] = state.Project
		inputs["visibility"] = state.Visibility
	}
	s, err := ctx.ReadResource("gcp:dns/managedZone:ManagedZone", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ManagedZone{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ManagedZone) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ManagedZone) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A textual description field. Defaults to 'Managed by Terraform'.
func (r *ManagedZone) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The DNS name of this managed zone, for instance "example.com.".
func (r *ManagedZone) DnsName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dnsName"])
}

// DNSSEC configuration
func (r *ManagedZone) DnssecConfig() *pulumi.Output {
	return r.s.State["dnssecConfig"]
}

// The presence for this field indicates that outbound forwarding is enabled for this zone. The value of this field
// contains the set of destinations to forward to.
func (r *ManagedZone) ForwardingConfig() *pulumi.Output {
	return r.s.State["forwardingConfig"]
}

// A set of key/value label pairs to assign to this ManagedZone.
func (r *ManagedZone) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

// User assigned name for this resource. Must be unique within the project.
func (r *ManagedZone) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Delegate your managed_zone to these virtual name servers; defined by the server
func (r *ManagedZone) NameServers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["nameServers"])
}

// The presence of this field indicates that DNS Peering is enabled for this zone. The value of this field contains the
// network to peer with.
func (r *ManagedZone) PeeringConfig() *pulumi.Output {
	return r.s.State["peeringConfig"]
}

// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
func (r *ManagedZone) PrivateVisibilityConfig() *pulumi.Output {
	return r.s.State["privateVisibilityConfig"]
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *ManagedZone) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private
// Cloud resources. Must be one of: 'public', 'private'.
func (r *ManagedZone) Visibility() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["visibility"])
}

// Input properties used for looking up and filtering ManagedZone resources.
type ManagedZoneState struct {
	// A textual description field. Defaults to 'Managed by Terraform'.
	Description interface{}
	// The DNS name of this managed zone, for instance "example.com.".
	DnsName interface{}
	// DNSSEC configuration
	DnssecConfig interface{}
	// The presence for this field indicates that outbound forwarding is enabled for this zone. The value of this field
	// contains the set of destinations to forward to.
	ForwardingConfig interface{}
	// A set of key/value label pairs to assign to this ManagedZone.
	Labels interface{}
	// User assigned name for this resource. Must be unique within the project.
	Name interface{}
	// Delegate your managed_zone to these virtual name servers; defined by the server
	NameServers interface{}
	// The presence of this field indicates that DNS Peering is enabled for this zone. The value of this field contains the
	// network to peer with.
	PeeringConfig interface{}
	// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	PrivateVisibilityConfig interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual
	// Private Cloud resources. Must be one of: 'public', 'private'.
	Visibility interface{}
}

// The set of arguments for constructing a ManagedZone resource.
type ManagedZoneArgs struct {
	// A textual description field. Defaults to 'Managed by Terraform'.
	Description interface{}
	// The DNS name of this managed zone, for instance "example.com.".
	DnsName interface{}
	// DNSSEC configuration
	DnssecConfig interface{}
	// The presence for this field indicates that outbound forwarding is enabled for this zone. The value of this field
	// contains the set of destinations to forward to.
	ForwardingConfig interface{}
	// A set of key/value label pairs to assign to this ManagedZone.
	Labels interface{}
	// User assigned name for this resource. Must be unique within the project.
	Name interface{}
	// The presence of this field indicates that DNS Peering is enabled for this zone. The value of this field contains the
	// network to peer with.
	PeeringConfig interface{}
	// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	PrivateVisibilityConfig interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual
	// Private Cloud resources. Must be one of: 'public', 'private'.
	Visibility interface{}
}
