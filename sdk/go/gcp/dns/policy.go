// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/dns_policy.html.markdown.
type Policy struct {
	s *pulumi.ResourceState
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOpt) (*Policy, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["alternativeNameServerConfig"] = nil
		inputs["description"] = nil
		inputs["enableInboundForwarding"] = nil
		inputs["enableLogging"] = nil
		inputs["name"] = nil
		inputs["networks"] = nil
		inputs["project"] = nil
	} else {
		inputs["alternativeNameServerConfig"] = args.AlternativeNameServerConfig
		inputs["description"] = args.Description
		inputs["enableInboundForwarding"] = args.EnableInboundForwarding
		inputs["enableLogging"] = args.EnableLogging
		inputs["name"] = args.Name
		inputs["networks"] = args.Networks
		inputs["project"] = args.Project
	}
	s, err := ctx.RegisterResource("gcp:dns/policy:Policy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Policy{s: s}, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PolicyState, opts ...pulumi.ResourceOpt) (*Policy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["alternativeNameServerConfig"] = state.AlternativeNameServerConfig
		inputs["description"] = state.Description
		inputs["enableInboundForwarding"] = state.EnableInboundForwarding
		inputs["enableLogging"] = state.EnableLogging
		inputs["name"] = state.Name
		inputs["networks"] = state.Networks
		inputs["project"] = state.Project
	}
	s, err := ctx.ReadResource("gcp:dns/policy:Policy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Policy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Policy) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Policy) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name
// server that you choose. Names such as .internal are not available when an alternative name server is specified.
func (r *Policy) AlternativeNameServerConfig() pulumi.Output {
	return r.s.State["alternativeNameServerConfig"]
}

// A textual description field. Defaults to 'Managed by Terraform'.
func (r *Policy) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When
// enabled, a virtual IP address will be allocated from each of the sub-networks that are bound to this policy.
func (r *Policy) EnableInboundForwarding() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enableInboundForwarding"])
}

// Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
func (r *Policy) EnableLogging() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enableLogging"])
}

// User assigned name for this policy.
func (r *Policy) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// List of network names specifying networks to which this policy is applied.
func (r *Policy) Networks() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["networks"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Policy) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Input properties used for looking up and filtering Policy resources.
type PolicyState struct {
	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name
	// server that you choose. Names such as .internal are not available when an alternative name server is specified.
	AlternativeNameServerConfig interface{}
	// A textual description field. Defaults to 'Managed by Terraform'.
	Description interface{}
	// Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When
	// enabled, a virtual IP address will be allocated from each of the sub-networks that are bound to this policy.
	EnableInboundForwarding interface{}
	// Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
	EnableLogging interface{}
	// User assigned name for this policy.
	Name interface{}
	// List of network names specifying networks to which this policy is applied.
	Networks interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name
	// server that you choose. Names such as .internal are not available when an alternative name server is specified.
	AlternativeNameServerConfig interface{}
	// A textual description field. Defaults to 'Managed by Terraform'.
	Description interface{}
	// Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When
	// enabled, a virtual IP address will be allocated from each of the sub-networks that are bound to this policy.
	EnableInboundForwarding interface{}
	// Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
	EnableLogging interface{}
	// User assigned name for this policy.
	Name interface{}
	// List of network names specifying networks to which this policy is applied.
	Networks interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
}
