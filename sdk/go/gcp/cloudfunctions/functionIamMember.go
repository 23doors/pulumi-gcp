// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudfunctions

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/cloudfunctions_function_iam_member.html.markdown.
type FunctionIamMember struct {
	s *pulumi.ResourceState
}

// NewFunctionIamMember registers a new resource with the given unique name, arguments, and options.
func NewFunctionIamMember(ctx *pulumi.Context,
	name string, args *FunctionIamMemberArgs, opts ...pulumi.ResourceOpt) (*FunctionIamMember, error) {
	if args == nil || args.CloudFunction == nil {
		return nil, errors.New("missing required argument 'CloudFunction'")
	}
	if args == nil || args.Member == nil {
		return nil, errors.New("missing required argument 'Member'")
	}
	if args == nil || args.Role == nil {
		return nil, errors.New("missing required argument 'Role'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cloudFunction"] = nil
		inputs["condition"] = nil
		inputs["member"] = nil
		inputs["project"] = nil
		inputs["region"] = nil
		inputs["role"] = nil
	} else {
		inputs["cloudFunction"] = args.CloudFunction
		inputs["condition"] = args.Condition
		inputs["member"] = args.Member
		inputs["project"] = args.Project
		inputs["region"] = args.Region
		inputs["role"] = args.Role
	}
	inputs["etag"] = nil
	s, err := ctx.RegisterResource("gcp:cloudfunctions/functionIamMember:FunctionIamMember", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FunctionIamMember{s: s}, nil
}

// GetFunctionIamMember gets an existing FunctionIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunctionIamMember(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FunctionIamMemberState, opts ...pulumi.ResourceOpt) (*FunctionIamMember, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cloudFunction"] = state.CloudFunction
		inputs["condition"] = state.Condition
		inputs["etag"] = state.Etag
		inputs["member"] = state.Member
		inputs["project"] = state.Project
		inputs["region"] = state.Region
		inputs["role"] = state.Role
	}
	s, err := ctx.ReadResource("gcp:cloudfunctions/functionIamMember:FunctionIamMember", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FunctionIamMember{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *FunctionIamMember) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *FunctionIamMember) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Used to find the parent resource to bind the IAM policy to
func (r *FunctionIamMember) CloudFunction() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["cloudFunction"])
}

func (r *FunctionIamMember) Condition() pulumi.Output {
	return r.s.State["condition"]
}

// (Computed) The etag of the IAM policy.
func (r *FunctionIamMember) Etag() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["etag"])
}

func (r *FunctionIamMember) Member() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["member"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (r *FunctionIamMember) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// The location of this cloud function. Used to find the parent resource to bind the IAM policy to. If not specified,
// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
// region is specified, it is taken from the provider configuration.
func (r *FunctionIamMember) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// The role that should be applied. Only one
// `cloudfunctions.FunctionIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (r *FunctionIamMember) Role() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["role"])
}

// Input properties used for looking up and filtering FunctionIamMember resources.
type FunctionIamMemberState struct {
	// Used to find the parent resource to bind the IAM policy to
	CloudFunction interface{}
	Condition interface{}
	// (Computed) The etag of the IAM policy.
	Etag interface{}
	Member interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project interface{}
	// The location of this cloud function. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region interface{}
	// The role that should be applied. Only one
	// `cloudfunctions.FunctionIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role interface{}
}

// The set of arguments for constructing a FunctionIamMember resource.
type FunctionIamMemberArgs struct {
	// Used to find the parent resource to bind the IAM policy to
	CloudFunction interface{}
	Condition interface{}
	Member interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project interface{}
	// The location of this cloud function. Used to find the parent resource to bind the IAM policy to. If not specified,
	// the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
	// region is specified, it is taken from the provider configuration.
	Region interface{}
	// The role that should be applied. Only one
	// `cloudfunctions.FunctionIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role interface{}
}
