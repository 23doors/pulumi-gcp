// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package identityplatform

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/identity_platform_tenant.html.markdown.
type Tenant struct {
	s *pulumi.ResourceState
}

// NewTenant registers a new resource with the given unique name, arguments, and options.
func NewTenant(ctx *pulumi.Context,
	name string, args *TenantArgs, opts ...pulumi.ResourceOpt) (*Tenant, error) {
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allowPasswordSignup"] = nil
		inputs["disableAuth"] = nil
		inputs["displayName"] = nil
		inputs["enableEmailLinkSignin"] = nil
		inputs["project"] = nil
	} else {
		inputs["allowPasswordSignup"] = args.AllowPasswordSignup
		inputs["disableAuth"] = args.DisableAuth
		inputs["displayName"] = args.DisplayName
		inputs["enableEmailLinkSignin"] = args.EnableEmailLinkSignin
		inputs["project"] = args.Project
	}
	inputs["name"] = nil
	s, err := ctx.RegisterResource("gcp:identityplatform/tenant:Tenant", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Tenant{s: s}, nil
}

// GetTenant gets an existing Tenant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTenant(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TenantState, opts ...pulumi.ResourceOpt) (*Tenant, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allowPasswordSignup"] = state.AllowPasswordSignup
		inputs["disableAuth"] = state.DisableAuth
		inputs["displayName"] = state.DisplayName
		inputs["enableEmailLinkSignin"] = state.EnableEmailLinkSignin
		inputs["name"] = state.Name
		inputs["project"] = state.Project
	}
	s, err := ctx.ReadResource("gcp:identityplatform/tenant:Tenant", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Tenant{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Tenant) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Tenant) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Whether to allow email/password user authentication.
func (r *Tenant) AllowPasswordSignup() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["allowPasswordSignup"])
}

// Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to
// sign-in. Admins of the disabled tenant are not able to manage its users.
func (r *Tenant) DisableAuth() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["disableAuth"])
}

// Human friendly display name of the tenant.
func (r *Tenant) DisplayName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["displayName"])
}

// Whether to enable email link user authentication.
func (r *Tenant) EnableEmailLinkSignin() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enableEmailLinkSignin"])
}

// The name of the tenant that is generated by the server
func (r *Tenant) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Tenant) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Input properties used for looking up and filtering Tenant resources.
type TenantState struct {
	// Whether to allow email/password user authentication.
	AllowPasswordSignup interface{}
	// Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to
	// sign-in. Admins of the disabled tenant are not able to manage its users.
	DisableAuth interface{}
	// Human friendly display name of the tenant.
	DisplayName interface{}
	// Whether to enable email link user authentication.
	EnableEmailLinkSignin interface{}
	// The name of the tenant that is generated by the server
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
}

// The set of arguments for constructing a Tenant resource.
type TenantArgs struct {
	// Whether to allow email/password user authentication.
	AllowPasswordSignup interface{}
	// Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to
	// sign-in. Admins of the disabled tenant are not able to manage its users.
	DisableAuth interface{}
	// Human friendly display name of the tenant.
	DisplayName interface{}
	// Whether to enable email link user authentication.
	EnableEmailLinkSignin interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
}
