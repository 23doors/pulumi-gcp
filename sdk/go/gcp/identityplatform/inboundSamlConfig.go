// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package identityplatform

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/identity_platform_inbound_saml_config.html.markdown.
type InboundSamlConfig struct {
	s *pulumi.ResourceState
}

// NewInboundSamlConfig registers a new resource with the given unique name, arguments, and options.
func NewInboundSamlConfig(ctx *pulumi.Context,
	name string, args *InboundSamlConfigArgs, opts ...pulumi.ResourceOpt) (*InboundSamlConfig, error) {
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	if args == nil || args.IdpConfig == nil {
		return nil, errors.New("missing required argument 'IdpConfig'")
	}
	if args == nil || args.SpConfig == nil {
		return nil, errors.New("missing required argument 'SpConfig'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["displayName"] = nil
		inputs["enabled"] = nil
		inputs["idpConfig"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
		inputs["spConfig"] = nil
	} else {
		inputs["displayName"] = args.DisplayName
		inputs["enabled"] = args.Enabled
		inputs["idpConfig"] = args.IdpConfig
		inputs["name"] = args.Name
		inputs["project"] = args.Project
		inputs["spConfig"] = args.SpConfig
	}
	s, err := ctx.RegisterResource("gcp:identityplatform/inboundSamlConfig:InboundSamlConfig", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &InboundSamlConfig{s: s}, nil
}

// GetInboundSamlConfig gets an existing InboundSamlConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInboundSamlConfig(ctx *pulumi.Context,
	name string, id pulumi.ID, state *InboundSamlConfigState, opts ...pulumi.ResourceOpt) (*InboundSamlConfig, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["displayName"] = state.DisplayName
		inputs["enabled"] = state.Enabled
		inputs["idpConfig"] = state.IdpConfig
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["spConfig"] = state.SpConfig
	}
	s, err := ctx.ReadResource("gcp:identityplatform/inboundSamlConfig:InboundSamlConfig", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &InboundSamlConfig{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *InboundSamlConfig) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *InboundSamlConfig) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Human friendly display name.
func (r *InboundSamlConfig) DisplayName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["displayName"])
}

// If this config allows users to sign in with the provider.
func (r *InboundSamlConfig) Enabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enabled"])
}

// SAML IdP configuration when the project acts as the relying party
func (r *InboundSamlConfig) IdpConfig() pulumi.Output {
	return r.s.State["idpConfig"]
}

// The name of the InboundSamlConfig resource. Must start with 'saml.' and can only have alphanumeric characters, hyphens,
// underscores or periods. The part after 'saml.' must also start with a lowercase letter, end with an alphanumeric
// character, and have at least 2 characters.
func (r *InboundSamlConfig) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

func (r *InboundSamlConfig) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// SAML SP (Service Provider) configuration when the project acts as the relying party to receive and accept an
// authentication assertion issued by a SAML identity provider.
func (r *InboundSamlConfig) SpConfig() pulumi.Output {
	return r.s.State["spConfig"]
}

// Input properties used for looking up and filtering InboundSamlConfig resources.
type InboundSamlConfigState struct {
	// Human friendly display name.
	DisplayName interface{}
	// If this config allows users to sign in with the provider.
	Enabled interface{}
	// SAML IdP configuration when the project acts as the relying party
	IdpConfig interface{}
	// The name of the InboundSamlConfig resource. Must start with 'saml.' and can only have alphanumeric characters, hyphens,
	// underscores or periods. The part after 'saml.' must also start with a lowercase letter, end with an alphanumeric
	// character, and have at least 2 characters.
	Name interface{}
	Project interface{}
	// SAML SP (Service Provider) configuration when the project acts as the relying party to receive and accept an
	// authentication assertion issued by a SAML identity provider.
	SpConfig interface{}
}

// The set of arguments for constructing a InboundSamlConfig resource.
type InboundSamlConfigArgs struct {
	// Human friendly display name.
	DisplayName interface{}
	// If this config allows users to sign in with the provider.
	Enabled interface{}
	// SAML IdP configuration when the project acts as the relying party
	IdpConfig interface{}
	// The name of the InboundSamlConfig resource. Must start with 'saml.' and can only have alphanumeric characters, hyphens,
	// underscores or periods. The part after 'saml.' must also start with a lowercase letter, end with an alphanumeric
	// character, and have at least 2 characters.
	Name interface{}
	Project interface{}
	// SAML SP (Service Provider) configuration when the project acts as the relying party to receive and accept an
	// authentication assertion issued by a SAML identity provider.
	SpConfig interface{}
}
