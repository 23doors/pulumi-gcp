// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appengine

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/app_engine_domain_mapping.html.markdown.
type DomainMapping struct {
	s *pulumi.ResourceState
}

// NewDomainMapping registers a new resource with the given unique name, arguments, and options.
func NewDomainMapping(ctx *pulumi.Context,
	name string, args *DomainMappingArgs, opts ...pulumi.ResourceOpt) (*DomainMapping, error) {
	if args == nil || args.DomainName == nil {
		return nil, errors.New("missing required argument 'DomainName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["domainName"] = nil
		inputs["overrideStrategy"] = nil
		inputs["project"] = nil
		inputs["sslSettings"] = nil
	} else {
		inputs["domainName"] = args.DomainName
		inputs["overrideStrategy"] = args.OverrideStrategy
		inputs["project"] = args.Project
		inputs["sslSettings"] = args.SslSettings
	}
	inputs["name"] = nil
	inputs["resourceRecords"] = nil
	s, err := ctx.RegisterResource("gcp:appengine/domainMapping:DomainMapping", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DomainMapping{s: s}, nil
}

// GetDomainMapping gets an existing DomainMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainMapping(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DomainMappingState, opts ...pulumi.ResourceOpt) (*DomainMapping, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["domainName"] = state.DomainName
		inputs["name"] = state.Name
		inputs["overrideStrategy"] = state.OverrideStrategy
		inputs["project"] = state.Project
		inputs["resourceRecords"] = state.ResourceRecords
		inputs["sslSettings"] = state.SslSettings
	}
	s, err := ctx.ReadResource("gcp:appengine/domainMapping:DomainMapping", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DomainMapping{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DomainMapping) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DomainMapping) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Relative name of the domain serving the application. Example: example.com.
func (r *DomainMapping) DomainName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["domainName"])
}

// Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.
func (r *DomainMapping) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Whether the domain creation should override any existing mappings for this domain. By default, overrides are rejected.
func (r *DomainMapping) OverrideStrategy() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["overrideStrategy"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *DomainMapping) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// The resource records required to configure this domain mapping. These records must be added to the domain's DNS
// configuration in order to serve the application via this domain mapping.
func (r *DomainMapping) ResourceRecords() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["resourceRecords"])
}

// SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
func (r *DomainMapping) SslSettings() pulumi.Output {
	return r.s.State["sslSettings"]
}

// Input properties used for looking up and filtering DomainMapping resources.
type DomainMappingState struct {
	// Relative name of the domain serving the application. Example: example.com.
	DomainName interface{}
	// Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.
	Name interface{}
	// Whether the domain creation should override any existing mappings for this domain. By default, overrides are rejected.
	OverrideStrategy interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The resource records required to configure this domain mapping. These records must be added to the domain's DNS
	// configuration in order to serve the application via this domain mapping.
	ResourceRecords interface{}
	// SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
	SslSettings interface{}
}

// The set of arguments for constructing a DomainMapping resource.
type DomainMappingArgs struct {
	// Relative name of the domain serving the application. Example: example.com.
	DomainName interface{}
	// Whether the domain creation should override any existing mappings for this domain. By default, overrides are rejected.
	OverrideStrategy interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
	SslSettings interface{}
}
