// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appengine

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/app_engine_application_url_dispatch_rules.html.markdown.
type ApplicationUrlDispatchRules struct {
	s *pulumi.ResourceState
}

// NewApplicationUrlDispatchRules registers a new resource with the given unique name, arguments, and options.
func NewApplicationUrlDispatchRules(ctx *pulumi.Context,
	name string, args *ApplicationUrlDispatchRulesArgs, opts ...pulumi.ResourceOpt) (*ApplicationUrlDispatchRules, error) {
	if args == nil || args.DispatchRules == nil {
		return nil, errors.New("missing required argument 'DispatchRules'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["dispatchRules"] = nil
		inputs["project"] = nil
	} else {
		inputs["dispatchRules"] = args.DispatchRules
		inputs["project"] = args.Project
	}
	s, err := ctx.RegisterResource("gcp:appengine/applicationUrlDispatchRules:ApplicationUrlDispatchRules", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ApplicationUrlDispatchRules{s: s}, nil
}

// GetApplicationUrlDispatchRules gets an existing ApplicationUrlDispatchRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationUrlDispatchRules(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ApplicationUrlDispatchRulesState, opts ...pulumi.ResourceOpt) (*ApplicationUrlDispatchRules, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["dispatchRules"] = state.DispatchRules
		inputs["project"] = state.Project
	}
	s, err := ctx.ReadResource("gcp:appengine/applicationUrlDispatchRules:ApplicationUrlDispatchRules", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ApplicationUrlDispatchRules{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ApplicationUrlDispatchRules) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ApplicationUrlDispatchRules) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Rules to match an HTTP request and dispatch that request to a service.
func (r *ApplicationUrlDispatchRules) DispatchRules() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["dispatchRules"])
}

func (r *ApplicationUrlDispatchRules) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// Input properties used for looking up and filtering ApplicationUrlDispatchRules resources.
type ApplicationUrlDispatchRulesState struct {
	// Rules to match an HTTP request and dispatch that request to a service.
	DispatchRules interface{}
	Project interface{}
}

// The set of arguments for constructing a ApplicationUrlDispatchRules resource.
type ApplicationUrlDispatchRulesArgs struct {
	// Rules to match an HTTP request and dispatch that request to a service.
	DispatchRules interface{}
	Project interface{}
}
