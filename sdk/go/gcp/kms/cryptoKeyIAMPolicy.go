// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type CryptoKeyIAMPolicy struct {
	s *pulumi.ResourceState
}

// NewCryptoKeyIAMPolicy registers a new resource with the given unique name, arguments, and options.
func NewCryptoKeyIAMPolicy(ctx *pulumi.Context,
	name string, args *CryptoKeyIAMPolicyArgs, opts ...pulumi.ResourceOpt) (*CryptoKeyIAMPolicy, error) {
	if args == nil || args.CryptoKeyId == nil {
		return nil, errors.New("missing required argument 'CryptoKeyId'")
	}
	if args == nil || args.PolicyData == nil {
		return nil, errors.New("missing required argument 'PolicyData'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cryptoKeyId"] = nil
		inputs["policyData"] = nil
	} else {
		inputs["cryptoKeyId"] = args.CryptoKeyId
		inputs["policyData"] = args.PolicyData
	}
	inputs["etag"] = nil
	s, err := ctx.RegisterResource("gcp:kms/cryptoKeyIAMPolicy:CryptoKeyIAMPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CryptoKeyIAMPolicy{s: s}, nil
}

// GetCryptoKeyIAMPolicy gets an existing CryptoKeyIAMPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCryptoKeyIAMPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CryptoKeyIAMPolicyState, opts ...pulumi.ResourceOpt) (*CryptoKeyIAMPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cryptoKeyId"] = state.CryptoKeyId
		inputs["etag"] = state.Etag
		inputs["policyData"] = state.PolicyData
	}
	s, err := ctx.ReadResource("gcp:kms/cryptoKeyIAMPolicy:CryptoKeyIAMPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CryptoKeyIAMPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *CryptoKeyIAMPolicy) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *CryptoKeyIAMPolicy) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *CryptoKeyIAMPolicy) CryptoKeyId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["cryptoKeyId"])
}

func (r *CryptoKeyIAMPolicy) Etag() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["etag"])
}

func (r *CryptoKeyIAMPolicy) PolicyData() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["policyData"])
}

// Input properties used for looking up and filtering CryptoKeyIAMPolicy resources.
type CryptoKeyIAMPolicyState struct {
	CryptoKeyId interface{}
	Etag interface{}
	PolicyData interface{}
}

// The set of arguments for constructing a CryptoKeyIAMPolicy resource.
type CryptoKeyIAMPolicyArgs struct {
	CryptoKeyId interface{}
	PolicyData interface{}
}
