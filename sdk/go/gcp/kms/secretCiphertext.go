// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/kms_secret_ciphertext.html.markdown.
type SecretCiphertext struct {
	s *pulumi.ResourceState
}

// NewSecretCiphertext registers a new resource with the given unique name, arguments, and options.
func NewSecretCiphertext(ctx *pulumi.Context,
	name string, args *SecretCiphertextArgs, opts ...pulumi.ResourceOpt) (*SecretCiphertext, error) {
	if args == nil || args.CryptoKey == nil {
		return nil, errors.New("missing required argument 'CryptoKey'")
	}
	if args == nil || args.Plaintext == nil {
		return nil, errors.New("missing required argument 'Plaintext'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cryptoKey"] = nil
		inputs["plaintext"] = nil
	} else {
		inputs["cryptoKey"] = args.CryptoKey
		inputs["plaintext"] = args.Plaintext
	}
	inputs["ciphertext"] = nil
	s, err := ctx.RegisterResource("gcp:kms/secretCiphertext:SecretCiphertext", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretCiphertext{s: s}, nil
}

// GetSecretCiphertext gets an existing SecretCiphertext resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretCiphertext(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecretCiphertextState, opts ...pulumi.ResourceOpt) (*SecretCiphertext, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["ciphertext"] = state.Ciphertext
		inputs["cryptoKey"] = state.CryptoKey
		inputs["plaintext"] = state.Plaintext
	}
	s, err := ctx.ReadResource("gcp:kms/secretCiphertext:SecretCiphertext", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretCiphertext{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecretCiphertext) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecretCiphertext) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Contains the result of encrypting the provided plaintext, encoded in base64.
func (r *SecretCiphertext) Ciphertext() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ciphertext"])
}

// The full name of the CryptoKey that will be used to encrypt the provided plaintext. Format:
// ''projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}/cryptoKeys/{{cryptoKey}}''
func (r *SecretCiphertext) CryptoKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["cryptoKey"])
}

// The plaintext to be encrypted.
func (r *SecretCiphertext) Plaintext() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["plaintext"])
}

// Input properties used for looking up and filtering SecretCiphertext resources.
type SecretCiphertextState struct {
	// Contains the result of encrypting the provided plaintext, encoded in base64.
	Ciphertext interface{}
	// The full name of the CryptoKey that will be used to encrypt the provided plaintext. Format:
	// ''projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}/cryptoKeys/{{cryptoKey}}''
	CryptoKey interface{}
	// The plaintext to be encrypted.
	Plaintext interface{}
}

// The set of arguments for constructing a SecretCiphertext resource.
type SecretCiphertextArgs struct {
	// The full name of the CryptoKey that will be used to encrypt the provided plaintext. Format:
	// ''projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}/cryptoKeys/{{cryptoKey}}''
	CryptoKey interface{}
	// The plaintext to be encrypted.
	Plaintext interface{}
}
