// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vpcaccess

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/vpc_access_connector.html.markdown.
type Connector struct {
	s *pulumi.ResourceState
}

// NewConnector registers a new resource with the given unique name, arguments, and options.
func NewConnector(ctx *pulumi.Context,
	name string, args *ConnectorArgs, opts ...pulumi.ResourceOpt) (*Connector, error) {
	if args == nil || args.IpCidrRange == nil {
		return nil, errors.New("missing required argument 'IpCidrRange'")
	}
	if args == nil || args.Region == nil {
		return nil, errors.New("missing required argument 'Region'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["ipCidrRange"] = nil
		inputs["maxThroughput"] = nil
		inputs["minThroughput"] = nil
		inputs["name"] = nil
		inputs["network"] = nil
		inputs["project"] = nil
		inputs["region"] = nil
	} else {
		inputs["ipCidrRange"] = args.IpCidrRange
		inputs["maxThroughput"] = args.MaxThroughput
		inputs["minThroughput"] = args.MinThroughput
		inputs["name"] = args.Name
		inputs["network"] = args.Network
		inputs["project"] = args.Project
		inputs["region"] = args.Region
	}
	inputs["selfLink"] = nil
	inputs["state"] = nil
	s, err := ctx.RegisterResource("gcp:vpcaccess/connector:Connector", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Connector{s: s}, nil
}

// GetConnector gets an existing Connector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnector(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ConnectorState, opts ...pulumi.ResourceOpt) (*Connector, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["ipCidrRange"] = state.IpCidrRange
		inputs["maxThroughput"] = state.MaxThroughput
		inputs["minThroughput"] = state.MinThroughput
		inputs["name"] = state.Name
		inputs["network"] = state.Network
		inputs["project"] = state.Project
		inputs["region"] = state.Region
		inputs["selfLink"] = state.SelfLink
		inputs["state"] = state.State
	}
	s, err := ctx.ReadResource("gcp:vpcaccess/connector:Connector", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Connector{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Connector) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Connector) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Connector) IpCidrRange() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipCidrRange"])
}

func (r *Connector) MaxThroughput() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["maxThroughput"])
}

func (r *Connector) MinThroughput() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["minThroughput"])
}

func (r *Connector) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Connector) Network() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["network"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Connector) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *Connector) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

func (r *Connector) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

func (r *Connector) State() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["state"])
}

// Input properties used for looking up and filtering Connector resources.
type ConnectorState struct {
	IpCidrRange interface{}
	MaxThroughput interface{}
	MinThroughput interface{}
	Name interface{}
	Network interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	Region interface{}
	SelfLink interface{}
	State interface{}
}

// The set of arguments for constructing a Connector resource.
type ConnectorArgs struct {
	IpCidrRange interface{}
	MaxThroughput interface{}
	MinThroughput interface{}
	Name interface{}
	Network interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	Region interface{}
}
