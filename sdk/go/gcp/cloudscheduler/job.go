// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudscheduler

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/cloud_scheduler_job.html.markdown.
type Job struct {
	s *pulumi.ResourceState
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOpt) (*Job, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["appEngineHttpTarget"] = nil
		inputs["description"] = nil
		inputs["httpTarget"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
		inputs["pubsubTarget"] = nil
		inputs["region"] = nil
		inputs["retryConfig"] = nil
		inputs["schedule"] = nil
		inputs["timeZone"] = nil
	} else {
		inputs["appEngineHttpTarget"] = args.AppEngineHttpTarget
		inputs["description"] = args.Description
		inputs["httpTarget"] = args.HttpTarget
		inputs["name"] = args.Name
		inputs["project"] = args.Project
		inputs["pubsubTarget"] = args.PubsubTarget
		inputs["region"] = args.Region
		inputs["retryConfig"] = args.RetryConfig
		inputs["schedule"] = args.Schedule
		inputs["timeZone"] = args.TimeZone
	}
	s, err := ctx.RegisterResource("gcp:cloudscheduler/job:Job", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Job{s: s}, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.ID, state *JobState, opts ...pulumi.ResourceOpt) (*Job, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["appEngineHttpTarget"] = state.AppEngineHttpTarget
		inputs["description"] = state.Description
		inputs["httpTarget"] = state.HttpTarget
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["pubsubTarget"] = state.PubsubTarget
		inputs["region"] = state.Region
		inputs["retryConfig"] = state.RetryConfig
		inputs["schedule"] = state.Schedule
		inputs["timeZone"] = state.TimeZone
	}
	s, err := ctx.ReadResource("gcp:cloudscheduler/job:Job", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Job{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Job) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Job) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// App Engine HTTP target. If the job providers a App Engine HTTP target the cron will send a request to the service
// instance
func (r *Job) AppEngineHttpTarget() *pulumi.Output {
	return r.s.State["appEngineHttpTarget"]
}

// A human-readable description for the job. This string must not contain more than 500 characters.
func (r *Job) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// HTTP target. If the job providers a http_target the cron will send a request to the targeted url
func (r *Job) HttpTarget() *pulumi.Output {
	return r.s.State["httpTarget"]
}

// The name of the job.
func (r *Job) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Job) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// Pub/Sub target If the job providers a Pub/Sub target the cron will publish a message to the provided topic
func (r *Job) PubsubTarget() *pulumi.Output {
	return r.s.State["pubsubTarget"]
}

// Region where the scheduler job resides
func (r *Job) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// By default, if a job does not complete successfully, meaning that an acknowledgement is not received from the handler,
// then it will be retried with exponential backoff according to the settings
func (r *Job) RetryConfig() *pulumi.Output {
	return r.s.State["retryConfig"]
}

// Describes the schedule on which the job will be executed.
func (r *Job) Schedule() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["schedule"])
}

// Specifies the time zone to be used in interpreting schedule. The value of this field must be a time zone name from the
// tz database.
func (r *Job) TimeZone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["timeZone"])
}

// Input properties used for looking up and filtering Job resources.
type JobState struct {
	// App Engine HTTP target. If the job providers a App Engine HTTP target the cron will send a request to the service
	// instance
	AppEngineHttpTarget interface{}
	// A human-readable description for the job. This string must not contain more than 500 characters.
	Description interface{}
	// HTTP target. If the job providers a http_target the cron will send a request to the targeted url
	HttpTarget interface{}
	// The name of the job.
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// Pub/Sub target If the job providers a Pub/Sub target the cron will publish a message to the provided topic
	PubsubTarget interface{}
	// Region where the scheduler job resides
	Region interface{}
	// By default, if a job does not complete successfully, meaning that an acknowledgement is not received from the handler,
	// then it will be retried with exponential backoff according to the settings
	RetryConfig interface{}
	// Describes the schedule on which the job will be executed.
	Schedule interface{}
	// Specifies the time zone to be used in interpreting schedule. The value of this field must be a time zone name from the
	// tz database.
	TimeZone interface{}
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	// App Engine HTTP target. If the job providers a App Engine HTTP target the cron will send a request to the service
	// instance
	AppEngineHttpTarget interface{}
	// A human-readable description for the job. This string must not contain more than 500 characters.
	Description interface{}
	// HTTP target. If the job providers a http_target the cron will send a request to the targeted url
	HttpTarget interface{}
	// The name of the job.
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// Pub/Sub target If the job providers a Pub/Sub target the cron will publish a message to the provided topic
	PubsubTarget interface{}
	// Region where the scheduler job resides
	Region interface{}
	// By default, if a job does not complete successfully, meaning that an acknowledgement is not received from the handler,
	// then it will be retried with exponential backoff according to the settings
	RetryConfig interface{}
	// Describes the schedule on which the job will be executed.
	Schedule interface{}
	// Specifies the time zone to be used in interpreting schedule. The value of this field must be a time zone name from the
	// tz database.
	TimeZone interface{}
}
