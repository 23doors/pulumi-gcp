// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/bigtable_app_profile.html.markdown.
type AppProfile struct {
	s *pulumi.ResourceState
}

// NewAppProfile registers a new resource with the given unique name, arguments, and options.
func NewAppProfile(ctx *pulumi.Context,
	name string, args *AppProfileArgs, opts ...pulumi.ResourceOpt) (*AppProfile, error) {
	if args == nil || args.AppProfileId == nil {
		return nil, errors.New("missing required argument 'AppProfileId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["appProfileId"] = nil
		inputs["description"] = nil
		inputs["ignoreWarnings"] = nil
		inputs["instance"] = nil
		inputs["multiClusterRoutingUseAny"] = nil
		inputs["project"] = nil
		inputs["singleClusterRouting"] = nil
	} else {
		inputs["appProfileId"] = args.AppProfileId
		inputs["description"] = args.Description
		inputs["ignoreWarnings"] = args.IgnoreWarnings
		inputs["instance"] = args.Instance
		inputs["multiClusterRoutingUseAny"] = args.MultiClusterRoutingUseAny
		inputs["project"] = args.Project
		inputs["singleClusterRouting"] = args.SingleClusterRouting
	}
	inputs["name"] = nil
	s, err := ctx.RegisterResource("gcp:bigquery/appProfile:AppProfile", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AppProfile{s: s}, nil
}

// GetAppProfile gets an existing AppProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppProfile(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AppProfileState, opts ...pulumi.ResourceOpt) (*AppProfile, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["appProfileId"] = state.AppProfileId
		inputs["description"] = state.Description
		inputs["ignoreWarnings"] = state.IgnoreWarnings
		inputs["instance"] = state.Instance
		inputs["multiClusterRoutingUseAny"] = state.MultiClusterRoutingUseAny
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["singleClusterRouting"] = state.SingleClusterRouting
	}
	s, err := ctx.ReadResource("gcp:bigquery/appProfile:AppProfile", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AppProfile{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AppProfile) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AppProfile) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The unique name of the app profile in the form '[_a-zA-Z0-9][-_.a-zA-Z0-9]*'.
func (r *AppProfile) AppProfileId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["appProfileId"])
}

// Long form description of the use case for this app profile.
func (r *AppProfile) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// If true, ignore safety checks when deleting/updating the app profile.
func (r *AppProfile) IgnoreWarnings() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["ignoreWarnings"])
}

// The name of the instance to create the app profile within.
func (r *AppProfile) Instance() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["instance"])
}

// If true, read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest
// cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant.
// Choosing this option sacrifices read-your-writes consistency to improve availability.
func (r *AppProfile) MultiClusterRoutingUseAny() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["multiClusterRoutingUseAny"])
}

// The unique name of the requested app profile. Values are of the form
// 'projects/<project>/instances/<instance>/appProfiles/<appProfileId>'.
func (r *AppProfile) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *AppProfile) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// Use a single-cluster routing policy.
func (r *AppProfile) SingleClusterRouting() *pulumi.Output {
	return r.s.State["singleClusterRouting"]
}

// Input properties used for looking up and filtering AppProfile resources.
type AppProfileState struct {
	// The unique name of the app profile in the form '[_a-zA-Z0-9][-_.a-zA-Z0-9]*'.
	AppProfileId interface{}
	// Long form description of the use case for this app profile.
	Description interface{}
	// If true, ignore safety checks when deleting/updating the app profile.
	IgnoreWarnings interface{}
	// The name of the instance to create the app profile within.
	Instance interface{}
	// If true, read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest
	// cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant.
	// Choosing this option sacrifices read-your-writes consistency to improve availability.
	MultiClusterRoutingUseAny interface{}
	// The unique name of the requested app profile. Values are of the form
	// 'projects/<project>/instances/<instance>/appProfiles/<appProfileId>'.
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// Use a single-cluster routing policy.
	SingleClusterRouting interface{}
}

// The set of arguments for constructing a AppProfile resource.
type AppProfileArgs struct {
	// The unique name of the app profile in the form '[_a-zA-Z0-9][-_.a-zA-Z0-9]*'.
	AppProfileId interface{}
	// Long form description of the use case for this app profile.
	Description interface{}
	// If true, ignore safety checks when deleting/updating the app profile.
	IgnoreWarnings interface{}
	// The name of the instance to create the app profile within.
	Instance interface{}
	// If true, read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest
	// cluster that is available in the event of transient errors or delays. Clusters in a region are considered equidistant.
	// Choosing this option sacrifices read-your-writes consistency to improve availability.
	MultiClusterRoutingUseAny interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// Use a single-cluster routing policy.
	SingleClusterRouting interface{}
}
