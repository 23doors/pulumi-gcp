// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package bigquery

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/bigquery_dataset.html.markdown.
type Dataset struct {
	s *pulumi.ResourceState
}

// NewDataset registers a new resource with the given unique name, arguments, and options.
func NewDataset(ctx *pulumi.Context,
	name string, args *DatasetArgs, opts ...pulumi.ResourceOpt) (*Dataset, error) {
	if args == nil || args.DatasetId == nil {
		return nil, errors.New("missing required argument 'DatasetId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accesses"] = nil
		inputs["datasetId"] = nil
		inputs["defaultPartitionExpirationMs"] = nil
		inputs["defaultTableExpirationMs"] = nil
		inputs["deleteContentsOnDestroy"] = nil
		inputs["description"] = nil
		inputs["friendlyName"] = nil
		inputs["labels"] = nil
		inputs["location"] = nil
		inputs["project"] = nil
	} else {
		inputs["accesses"] = args.Accesses
		inputs["datasetId"] = args.DatasetId
		inputs["defaultPartitionExpirationMs"] = args.DefaultPartitionExpirationMs
		inputs["defaultTableExpirationMs"] = args.DefaultTableExpirationMs
		inputs["deleteContentsOnDestroy"] = args.DeleteContentsOnDestroy
		inputs["description"] = args.Description
		inputs["friendlyName"] = args.FriendlyName
		inputs["labels"] = args.Labels
		inputs["location"] = args.Location
		inputs["project"] = args.Project
	}
	inputs["creationTime"] = nil
	inputs["etag"] = nil
	inputs["lastModifiedTime"] = nil
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:bigquery/dataset:Dataset", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Dataset{s: s}, nil
}

// GetDataset gets an existing Dataset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataset(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DatasetState, opts ...pulumi.ResourceOpt) (*Dataset, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accesses"] = state.Accesses
		inputs["creationTime"] = state.CreationTime
		inputs["datasetId"] = state.DatasetId
		inputs["defaultPartitionExpirationMs"] = state.DefaultPartitionExpirationMs
		inputs["defaultTableExpirationMs"] = state.DefaultTableExpirationMs
		inputs["deleteContentsOnDestroy"] = state.DeleteContentsOnDestroy
		inputs["description"] = state.Description
		inputs["etag"] = state.Etag
		inputs["friendlyName"] = state.FriendlyName
		inputs["labels"] = state.Labels
		inputs["lastModifiedTime"] = state.LastModifiedTime
		inputs["location"] = state.Location
		inputs["project"] = state.Project
		inputs["selfLink"] = state.SelfLink
	}
	s, err := ctx.ReadResource("gcp:bigquery/dataset:Dataset", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Dataset{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Dataset) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Dataset) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Dataset) Accesses() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["accesses"])
}

func (r *Dataset) CreationTime() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["creationTime"])
}

func (r *Dataset) DatasetId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["datasetId"])
}

func (r *Dataset) DefaultPartitionExpirationMs() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["defaultPartitionExpirationMs"])
}

func (r *Dataset) DefaultTableExpirationMs() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["defaultTableExpirationMs"])
}

// If set to `true`, delete all the tables in the
// dataset when destroying the resource; otherwise,
// destroying the resource will fail if tables are present.
func (r *Dataset) DeleteContentsOnDestroy() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["deleteContentsOnDestroy"])
}

func (r *Dataset) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *Dataset) Etag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["etag"])
}

func (r *Dataset) FriendlyName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["friendlyName"])
}

func (r *Dataset) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

func (r *Dataset) LastModifiedTime() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["lastModifiedTime"])
}

func (r *Dataset) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Dataset) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The URI of the created resource.
func (r *Dataset) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// Input properties used for looking up and filtering Dataset resources.
type DatasetState struct {
	Accesses interface{}
	CreationTime interface{}
	DatasetId interface{}
	DefaultPartitionExpirationMs interface{}
	DefaultTableExpirationMs interface{}
	// If set to `true`, delete all the tables in the
	// dataset when destroying the resource; otherwise,
	// destroying the resource will fail if tables are present.
	DeleteContentsOnDestroy interface{}
	Description interface{}
	Etag interface{}
	FriendlyName interface{}
	Labels interface{}
	LastModifiedTime interface{}
	Location interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The URI of the created resource.
	SelfLink interface{}
}

// The set of arguments for constructing a Dataset resource.
type DatasetArgs struct {
	Accesses interface{}
	DatasetId interface{}
	DefaultPartitionExpirationMs interface{}
	DefaultTableExpirationMs interface{}
	// If set to `true`, delete all the tables in the
	// dataset when destroying the resource; otherwise,
	// destroying the resource will fail if tables are present.
	DeleteContentsOnDestroy interface{}
	Description interface{}
	FriendlyName interface{}
	Labels interface{}
	Location interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
}
