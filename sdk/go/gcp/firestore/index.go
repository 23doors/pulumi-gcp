// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package firestore

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/firestore_index.html.markdown.
type Index struct {
	s *pulumi.ResourceState
}

// NewIndex registers a new resource with the given unique name, arguments, and options.
func NewIndex(ctx *pulumi.Context,
	name string, args *IndexArgs, opts ...pulumi.ResourceOpt) (*Index, error) {
	if args == nil || args.Collection == nil {
		return nil, errors.New("missing required argument 'Collection'")
	}
	if args == nil || args.Fields == nil {
		return nil, errors.New("missing required argument 'Fields'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["collection"] = nil
		inputs["database"] = nil
		inputs["fields"] = nil
		inputs["project"] = nil
		inputs["queryScope"] = nil
	} else {
		inputs["collection"] = args.Collection
		inputs["database"] = args.Database
		inputs["fields"] = args.Fields
		inputs["project"] = args.Project
		inputs["queryScope"] = args.QueryScope
	}
	inputs["name"] = nil
	s, err := ctx.RegisterResource("gcp:firestore/index:Index", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Index{s: s}, nil
}

// GetIndex gets an existing Index resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIndex(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IndexState, opts ...pulumi.ResourceOpt) (*Index, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["collection"] = state.Collection
		inputs["database"] = state.Database
		inputs["fields"] = state.Fields
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["queryScope"] = state.QueryScope
	}
	s, err := ctx.ReadResource("gcp:firestore/index:Index", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Index{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Index) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Index) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The collection being indexed.
func (r *Index) Collection() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["collection"])
}

// The Firestore database id. Defaults to '"(default)"'.
func (r *Index) Database() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["database"])
}

// The fields supported by this index. The last field entry is always for the field path '__name__'. If, on creation,
// '__name__' was not specified as the last field, it will be added automatically with the same direction as that of the
// last field defined. If the final field in a composite index is not directional, the '__name__' will be ordered
// '"ASCENDING"' (unless explicitly specified otherwise).
func (r *Index) Fields() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["fields"])
}

// A server defined name for this index. Format:
// 'projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/indexes/{{server_generated_id}}'
func (r *Index) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Index) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The scope at which a query is run. One of '"COLLECTION"' or '"COLLECTION_GROUP"'. Defaults to '"COLLECTION"'.
func (r *Index) QueryScope() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["queryScope"])
}

// Input properties used for looking up and filtering Index resources.
type IndexState struct {
	// The collection being indexed.
	Collection interface{}
	// The Firestore database id. Defaults to '"(default)"'.
	Database interface{}
	// The fields supported by this index. The last field entry is always for the field path '__name__'. If, on creation,
	// '__name__' was not specified as the last field, it will be added automatically with the same direction as that of the
	// last field defined. If the final field in a composite index is not directional, the '__name__' will be ordered
	// '"ASCENDING"' (unless explicitly specified otherwise).
	Fields interface{}
	// A server defined name for this index. Format:
	// 'projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/indexes/{{server_generated_id}}'
	Name interface{}
	Project interface{}
	// The scope at which a query is run. One of '"COLLECTION"' or '"COLLECTION_GROUP"'. Defaults to '"COLLECTION"'.
	QueryScope interface{}
}

// The set of arguments for constructing a Index resource.
type IndexArgs struct {
	// The collection being indexed.
	Collection interface{}
	// The Firestore database id. Defaults to '"(default)"'.
	Database interface{}
	// The fields supported by this index. The last field entry is always for the field path '__name__'. If, on creation,
	// '__name__' was not specified as the last field, it will be added automatically with the same direction as that of the
	// last field defined. If the final field in a composite index is not directional, the '__name__' will be ordered
	// '"ASCENDING"' (unless explicitly specified otherwise).
	Fields interface{}
	Project interface{}
	// The scope at which a query is run. One of '"COLLECTION"' or '"COLLECTION_GROUP"'. Defaults to '"COLLECTION"'.
	QueryScope interface{}
}
