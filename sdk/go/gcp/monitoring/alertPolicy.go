// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/monitoring_alert_policy.html.markdown.
type AlertPolicy struct {
	s *pulumi.ResourceState
}

// NewAlertPolicy registers a new resource with the given unique name, arguments, and options.
func NewAlertPolicy(ctx *pulumi.Context,
	name string, args *AlertPolicyArgs, opts ...pulumi.ResourceOpt) (*AlertPolicy, error) {
	if args == nil || args.Combiner == nil {
		return nil, errors.New("missing required argument 'Combiner'")
	}
	if args == nil || args.Conditions == nil {
		return nil, errors.New("missing required argument 'Conditions'")
	}
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["combiner"] = nil
		inputs["conditions"] = nil
		inputs["displayName"] = nil
		inputs["documentation"] = nil
		inputs["enabled"] = nil
		inputs["notificationChannels"] = nil
		inputs["project"] = nil
		inputs["userLabels"] = nil
	} else {
		inputs["combiner"] = args.Combiner
		inputs["conditions"] = args.Conditions
		inputs["displayName"] = args.DisplayName
		inputs["documentation"] = args.Documentation
		inputs["enabled"] = args.Enabled
		inputs["notificationChannels"] = args.NotificationChannels
		inputs["project"] = args.Project
		inputs["userLabels"] = args.UserLabels
	}
	inputs["creationRecord"] = nil
	inputs["name"] = nil
	s, err := ctx.RegisterResource("gcp:monitoring/alertPolicy:AlertPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AlertPolicy{s: s}, nil
}

// GetAlertPolicy gets an existing AlertPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AlertPolicyState, opts ...pulumi.ResourceOpt) (*AlertPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["combiner"] = state.Combiner
		inputs["conditions"] = state.Conditions
		inputs["creationRecord"] = state.CreationRecord
		inputs["displayName"] = state.DisplayName
		inputs["documentation"] = state.Documentation
		inputs["enabled"] = state.Enabled
		inputs["name"] = state.Name
		inputs["notificationChannels"] = state.NotificationChannels
		inputs["project"] = state.Project
		inputs["userLabels"] = state.UserLabels
	}
	s, err := ctx.ReadResource("gcp:monitoring/alertPolicy:AlertPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AlertPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AlertPolicy) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AlertPolicy) ID() pulumi.IDOutput {
	return r.s.ID()
}

// How to combine the results of multiple conditions to determine if an incident should be opened.
func (r *AlertPolicy) Combiner() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["combiner"])
}

// A list of conditions for the policy. The conditions are combined by AND or OR according to the combiner field. If the
// combined conditions evaluate to true, then an incident is created. A policy can have from one to six conditions.
func (r *AlertPolicy) Conditions() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["conditions"])
}

// A read-only record of the creation of the alerting policy. If provided in a call to create or update, this field will be
// ignored.
func (r *AlertPolicy) CreationRecord() pulumi.Output {
	return r.s.State["creationRecord"]
}

// A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion,
// don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode
// characters.
func (r *AlertPolicy) DisplayName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["displayName"])
}

// A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion,
// don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode
// characters.
func (r *AlertPolicy) Documentation() pulumi.Output {
	return r.s.State["documentation"]
}

// Whether or not the policy is enabled. The default is true.
func (r *AlertPolicy) Enabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enabled"])
}

// The unique resource name for this policy. Its syntax is: projects/[PROJECT_ID]/alertPolicies/[ALERT_POLICY_ID]
func (r *AlertPolicy) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when
// new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of
// the NotificationChannel objects that are returned from the notificationChannels.list method. The syntax of the entries
// in this field is 'projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]'
func (r *AlertPolicy) NotificationChannels() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["notificationChannels"])
}

func (r *AlertPolicy) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// This field is intended to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64
// entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
// can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
func (r *AlertPolicy) UserLabels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["userLabels"])
}

// Input properties used for looking up and filtering AlertPolicy resources.
type AlertPolicyState struct {
	// How to combine the results of multiple conditions to determine if an incident should be opened.
	Combiner interface{}
	// A list of conditions for the policy. The conditions are combined by AND or OR according to the combiner field. If the
	// combined conditions evaluate to true, then an incident is created. A policy can have from one to six conditions.
	Conditions interface{}
	// A read-only record of the creation of the alerting policy. If provided in a call to create or update, this field will
	// be ignored.
	CreationRecord interface{}
	// A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion,
	// don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode
	// characters.
	DisplayName interface{}
	// A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion,
	// don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode
	// characters.
	Documentation interface{}
	// Whether or not the policy is enabled. The default is true.
	Enabled interface{}
	// The unique resource name for this policy. Its syntax is: projects/[PROJECT_ID]/alertPolicies/[ALERT_POLICY_ID]
	Name interface{}
	// Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when
	// new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of
	// the NotificationChannel objects that are returned from the notificationChannels.list method. The syntax of the entries
	// in this field is 'projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]'
	NotificationChannels interface{}
	Project interface{}
	// This field is intended to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64
	// entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
	// can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
	UserLabels interface{}
}

// The set of arguments for constructing a AlertPolicy resource.
type AlertPolicyArgs struct {
	// How to combine the results of multiple conditions to determine if an incident should be opened.
	Combiner interface{}
	// A list of conditions for the policy. The conditions are combined by AND or OR according to the combiner field. If the
	// combined conditions evaluate to true, then an incident is created. A policy can have from one to six conditions.
	Conditions interface{}
	// A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion,
	// don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode
	// characters.
	DisplayName interface{}
	// A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion,
	// don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode
	// characters.
	Documentation interface{}
	// Whether or not the policy is enabled. The default is true.
	Enabled interface{}
	// Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when
	// new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of
	// the NotificationChannel objects that are returned from the notificationChannels.list method. The syntax of the entries
	// in this field is 'projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]'
	NotificationChannels interface{}
	Project interface{}
	// This field is intended to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64
	// entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
	// can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
	UserLabels interface{}
}
