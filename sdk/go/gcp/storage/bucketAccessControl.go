// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The BucketAccessControls resource represents the Access Control Lists
// (ACLs) for buckets within Google Cloud Storage. ACLs let you specify who
// has access to your data and to what extent.
// 
// There are three roles that can be assigned to an entity:
// 
// READERs can get the bucket, though no acl property will be returned, and
// list the bucket's objects.  WRITERs are READERs, and they can insert
// objects into the bucket and delete the bucket's objects.  OWNERs are
// WRITERs, and they can get the acl property of a bucket, update a bucket,
// and call all BucketAccessControls methods on the bucket.  For more
// information, see Access Control, with the caveat that this API uses
// READER, WRITER, and OWNER instead of READ, WRITE, and FULL_CONTROL.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/storage_bucket_access_control.html.markdown.
type BucketAccessControl struct {
	s *pulumi.ResourceState
}

// NewBucketAccessControl registers a new resource with the given unique name, arguments, and options.
func NewBucketAccessControl(ctx *pulumi.Context,
	name string, args *BucketAccessControlArgs, opts ...pulumi.ResourceOpt) (*BucketAccessControl, error) {
	if args == nil || args.Bucket == nil {
		return nil, errors.New("missing required argument 'Bucket'")
	}
	if args == nil || args.Entity == nil {
		return nil, errors.New("missing required argument 'Entity'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["bucket"] = nil
		inputs["entity"] = nil
		inputs["role"] = nil
	} else {
		inputs["bucket"] = args.Bucket
		inputs["entity"] = args.Entity
		inputs["role"] = args.Role
	}
	inputs["domain"] = nil
	inputs["email"] = nil
	s, err := ctx.RegisterResource("gcp:storage/bucketAccessControl:BucketAccessControl", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BucketAccessControl{s: s}, nil
}

// GetBucketAccessControl gets an existing BucketAccessControl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketAccessControl(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BucketAccessControlState, opts ...pulumi.ResourceOpt) (*BucketAccessControl, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["bucket"] = state.Bucket
		inputs["domain"] = state.Domain
		inputs["email"] = state.Email
		inputs["entity"] = state.Entity
		inputs["role"] = state.Role
	}
	s, err := ctx.ReadResource("gcp:storage/bucketAccessControl:BucketAccessControl", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BucketAccessControl{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *BucketAccessControl) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *BucketAccessControl) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *BucketAccessControl) Bucket() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["bucket"])
}

func (r *BucketAccessControl) Domain() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["domain"])
}

func (r *BucketAccessControl) Email() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["email"])
}

func (r *BucketAccessControl) Entity() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["entity"])
}

func (r *BucketAccessControl) Role() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["role"])
}

// Input properties used for looking up and filtering BucketAccessControl resources.
type BucketAccessControlState struct {
	Bucket interface{}
	Domain interface{}
	Email interface{}
	Entity interface{}
	Role interface{}
}

// The set of arguments for constructing a BucketAccessControl resource.
type BucketAccessControlArgs struct {
	Bucket interface{}
	Entity interface{}
	Role interface{}
}
