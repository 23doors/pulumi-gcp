// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package pubsub

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/pubsub_topic.html.markdown.
type Topic struct {
	s *pulumi.ResourceState
}

// NewTopic registers a new resource with the given unique name, arguments, and options.
func NewTopic(ctx *pulumi.Context,
	name string, args *TopicArgs, opts ...pulumi.ResourceOpt) (*Topic, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["kmsKeyName"] = nil
		inputs["labels"] = nil
		inputs["messageStoragePolicy"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
	} else {
		inputs["kmsKeyName"] = args.KmsKeyName
		inputs["labels"] = args.Labels
		inputs["messageStoragePolicy"] = args.MessageStoragePolicy
		inputs["name"] = args.Name
		inputs["project"] = args.Project
	}
	s, err := ctx.RegisterResource("gcp:pubsub/topic:Topic", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Topic{s: s}, nil
}

// GetTopic gets an existing Topic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopic(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TopicState, opts ...pulumi.ResourceOpt) (*Topic, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["kmsKeyName"] = state.KmsKeyName
		inputs["labels"] = state.Labels
		inputs["messageStoragePolicy"] = state.MessageStoragePolicy
		inputs["name"] = state.Name
		inputs["project"] = state.Project
	}
	s, err := ctx.ReadResource("gcp:pubsub/topic:Topic", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Topic{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Topic) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Topic) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The resource name of the Cloud KMS CryptoKey to be used to protect access to messages published on this topic. Your
// project's PubSub service account ('service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com') must have
// 'roles/cloudkms.cryptoKeyEncrypterDecrypter' to use this feature. The expected format is
// 'projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*'
func (r *Topic) KmsKeyName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["kmsKeyName"])
}

// A set of key/value label pairs to assign to this Topic.
func (r *Topic) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// Policy constraining the set of Google Cloud Platform regions where messages published to the topic may be stored. If not
// present, then no constraints are in effect.
func (r *Topic) MessageStoragePolicy() pulumi.Output {
	return r.s.State["messageStoragePolicy"]
}

// Name of the topic.
func (r *Topic) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Topic) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Input properties used for looking up and filtering Topic resources.
type TopicState struct {
	// The resource name of the Cloud KMS CryptoKey to be used to protect access to messages published on this topic. Your
	// project's PubSub service account ('service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com') must have
	// 'roles/cloudkms.cryptoKeyEncrypterDecrypter' to use this feature. The expected format is
	// 'projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*'
	KmsKeyName interface{}
	// A set of key/value label pairs to assign to this Topic.
	Labels interface{}
	// Policy constraining the set of Google Cloud Platform regions where messages published to the topic may be stored. If
	// not present, then no constraints are in effect.
	MessageStoragePolicy interface{}
	// Name of the topic.
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
}

// The set of arguments for constructing a Topic resource.
type TopicArgs struct {
	// The resource name of the Cloud KMS CryptoKey to be used to protect access to messages published on this topic. Your
	// project's PubSub service account ('service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com') must have
	// 'roles/cloudkms.cryptoKeyEncrypterDecrypter' to use this feature. The expected format is
	// 'projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*'
	KmsKeyName interface{}
	// A set of key/value label pairs to assign to this Topic.
	Labels interface{}
	// Policy constraining the set of Google Cloud Platform regions where messages published to the topic may be stored. If
	// not present, then no constraints are in effect.
	MessageStoragePolicy interface{}
	// Name of the topic.
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
}
