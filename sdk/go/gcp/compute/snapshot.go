// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_snapshot.html.markdown.
type Snapshot struct {
	s *pulumi.ResourceState
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOpt) (*Snapshot, error) {
	if args == nil || args.SourceDisk == nil {
		return nil, errors.New("missing required argument 'SourceDisk'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
		inputs["snapshotEncryptionKey"] = nil
		inputs["sourceDisk"] = nil
		inputs["sourceDiskEncryptionKey"] = nil
		inputs["zone"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["project"] = args.Project
		inputs["snapshotEncryptionKey"] = args.SnapshotEncryptionKey
		inputs["sourceDisk"] = args.SourceDisk
		inputs["sourceDiskEncryptionKey"] = args.SourceDiskEncryptionKey
		inputs["zone"] = args.Zone
	}
	inputs["creationTimestamp"] = nil
	inputs["diskSizeGb"] = nil
	inputs["labelFingerprint"] = nil
	inputs["licenses"] = nil
	inputs["selfLink"] = nil
	inputs["snapshotId"] = nil
	inputs["sourceDiskLink"] = nil
	inputs["storageBytes"] = nil
	s, err := ctx.RegisterResource("gcp:compute/snapshot:Snapshot", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Snapshot{s: s}, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SnapshotState, opts ...pulumi.ResourceOpt) (*Snapshot, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["creationTimestamp"] = state.CreationTimestamp
		inputs["description"] = state.Description
		inputs["diskSizeGb"] = state.DiskSizeGb
		inputs["labelFingerprint"] = state.LabelFingerprint
		inputs["labels"] = state.Labels
		inputs["licenses"] = state.Licenses
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["selfLink"] = state.SelfLink
		inputs["snapshotEncryptionKey"] = state.SnapshotEncryptionKey
		inputs["snapshotId"] = state.SnapshotId
		inputs["sourceDisk"] = state.SourceDisk
		inputs["sourceDiskEncryptionKey"] = state.SourceDiskEncryptionKey
		inputs["sourceDiskLink"] = state.SourceDiskLink
		inputs["storageBytes"] = state.StorageBytes
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("gcp:compute/snapshot:Snapshot", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Snapshot{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Snapshot) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Snapshot) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Creation timestamp in RFC3339 text format.
func (r *Snapshot) CreationTimestamp() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["creationTimestamp"])
}

// An optional description of this resource.
func (r *Snapshot) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Size of the snapshot, specified in GB.
func (r *Snapshot) DiskSizeGb() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["diskSizeGb"])
}

// The fingerprint used for optimistic locking of this resource. Used internally during updates.
func (r *Snapshot) LabelFingerprint() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["labelFingerprint"])
}

// Labels to apply to this Snapshot.
func (r *Snapshot) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses
// attached (such as a Windows image). snapshotEncryptionKey nested object Encrypts the snapshot using a customer-supplied
// encryption key.
func (r *Snapshot) Licenses() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["licenses"])
}

// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and
// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (r *Snapshot) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Snapshot) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// The URI of the created resource.
func (r *Snapshot) SelfLink() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["selfLink"])
}

// The customer-supplied encryption key of the snapshot. Required if the source snapshot is protected by a
// customer-supplied encryption key.
func (r *Snapshot) SnapshotEncryptionKey() pulumi.Output {
	return r.s.State["snapshotEncryptionKey"]
}

// The unique identifier for the resource.
func (r *Snapshot) SnapshotId() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["snapshotId"])
}

// A reference to the disk used to create this snapshot.
func (r *Snapshot) SourceDisk() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceDisk"])
}

// The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a
// customer-supplied encryption key.
func (r *Snapshot) SourceDiskEncryptionKey() pulumi.Output {
	return r.s.State["sourceDiskEncryptionKey"]
}

func (r *Snapshot) SourceDiskLink() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceDiskLink"])
}

// A size of the the storage used by the snapshot. As snapshots share storage, this number is expected to change with
// snapshot creation/deletion.
func (r *Snapshot) StorageBytes() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["storageBytes"])
}

// A reference to the zone where the disk is hosted.
func (r *Snapshot) Zone() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering Snapshot resources.
type SnapshotState struct {
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp interface{}
	// An optional description of this resource.
	Description interface{}
	// Size of the snapshot, specified in GB.
	DiskSizeGb interface{}
	// The fingerprint used for optimistic locking of this resource. Used internally during updates.
	LabelFingerprint interface{}
	// Labels to apply to this Snapshot.
	Labels interface{}
	// A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses
	// attached (such as a Windows image). snapshotEncryptionKey nested object Encrypts the snapshot using a customer-supplied
	// encryption key.
	Licenses interface{}
	// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The URI of the created resource.
	SelfLink interface{}
	// The customer-supplied encryption key of the snapshot. Required if the source snapshot is protected by a
	// customer-supplied encryption key.
	SnapshotEncryptionKey interface{}
	// The unique identifier for the resource.
	SnapshotId interface{}
	// A reference to the disk used to create this snapshot.
	SourceDisk interface{}
	// The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a
	// customer-supplied encryption key.
	SourceDiskEncryptionKey interface{}
	SourceDiskLink interface{}
	// A size of the the storage used by the snapshot. As snapshots share storage, this number is expected to change with
	// snapshot creation/deletion.
	StorageBytes interface{}
	// A reference to the zone where the disk is hosted.
	Zone interface{}
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// An optional description of this resource.
	Description interface{}
	// Labels to apply to this Snapshot.
	Labels interface{}
	// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The customer-supplied encryption key of the snapshot. Required if the source snapshot is protected by a
	// customer-supplied encryption key.
	SnapshotEncryptionKey interface{}
	// A reference to the disk used to create this snapshot.
	SourceDisk interface{}
	// The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a
	// customer-supplied encryption key.
	SourceDiskEncryptionKey interface{}
	// A reference to the zone where the disk is hosted.
	Zone interface{}
}
