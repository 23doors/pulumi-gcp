// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_resource_policy.html.markdown.
type ResourcePolicy struct {
	s *pulumi.ResourceState
}

// NewResourcePolicy registers a new resource with the given unique name, arguments, and options.
func NewResourcePolicy(ctx *pulumi.Context,
	name string, args *ResourcePolicyArgs, opts ...pulumi.ResourceOpt) (*ResourcePolicy, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
		inputs["project"] = nil
		inputs["region"] = nil
		inputs["snapshotSchedulePolicy"] = nil
	} else {
		inputs["name"] = args.Name
		inputs["project"] = args.Project
		inputs["region"] = args.Region
		inputs["snapshotSchedulePolicy"] = args.SnapshotSchedulePolicy
	}
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/resourcePolicy:ResourcePolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ResourcePolicy{s: s}, nil
}

// GetResourcePolicy gets an existing ResourcePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourcePolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ResourcePolicyState, opts ...pulumi.ResourceOpt) (*ResourcePolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["region"] = state.Region
		inputs["selfLink"] = state.SelfLink
		inputs["snapshotSchedulePolicy"] = state.SnapshotSchedulePolicy
	}
	s, err := ctx.ReadResource("gcp:compute/resourcePolicy:ResourcePolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ResourcePolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ResourcePolicy) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ResourcePolicy) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63
// characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular
// expression '[a-z]([-a-z0-9]*[a-z0-9])'? which means the first character must be a lowercase letter, and all following
// characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (r *ResourcePolicy) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *ResourcePolicy) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Region where resource policy resides.
func (r *ResourcePolicy) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

func (r *ResourcePolicy) SelfLink() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["selfLink"])
}

// Policy for creating snapshots of persistent disks.
func (r *ResourcePolicy) SnapshotSchedulePolicy() pulumi.Output {
	return r.s.State["snapshotSchedulePolicy"]
}

// Input properties used for looking up and filtering ResourcePolicy resources.
type ResourcePolicyState struct {
	// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63
	// characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular
	// expression '[a-z]([-a-z0-9]*[a-z0-9])'? which means the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// Region where resource policy resides.
	Region interface{}
	SelfLink interface{}
	// Policy for creating snapshots of persistent disks.
	SnapshotSchedulePolicy interface{}
}

// The set of arguments for constructing a ResourcePolicy resource.
type ResourcePolicyArgs struct {
	// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63
	// characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular
	// expression '[a-z]([-a-z0-9]*[a-z0-9])'? which means the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// Region where resource policy resides.
	Region interface{}
	// Policy for creating snapshots of persistent disks.
	SnapshotSchedulePolicy interface{}
}
