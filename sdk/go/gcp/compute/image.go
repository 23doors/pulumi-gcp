// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_image.html.markdown.
type Image struct {
	s *pulumi.ResourceState
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOpt) (*Image, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["diskSizeGb"] = nil
		inputs["family"] = nil
		inputs["guestOsFeatures"] = nil
		inputs["labels"] = nil
		inputs["licenses"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
		inputs["rawDisk"] = nil
		inputs["sourceDisk"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["diskSizeGb"] = args.DiskSizeGb
		inputs["family"] = args.Family
		inputs["guestOsFeatures"] = args.GuestOsFeatures
		inputs["labels"] = args.Labels
		inputs["licenses"] = args.Licenses
		inputs["name"] = args.Name
		inputs["project"] = args.Project
		inputs["rawDisk"] = args.RawDisk
		inputs["sourceDisk"] = args.SourceDisk
	}
	inputs["archiveSizeBytes"] = nil
	inputs["creationTimestamp"] = nil
	inputs["labelFingerprint"] = nil
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/image:Image", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Image{s: s}, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ImageState, opts ...pulumi.ResourceOpt) (*Image, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["archiveSizeBytes"] = state.ArchiveSizeBytes
		inputs["creationTimestamp"] = state.CreationTimestamp
		inputs["description"] = state.Description
		inputs["diskSizeGb"] = state.DiskSizeGb
		inputs["family"] = state.Family
		inputs["guestOsFeatures"] = state.GuestOsFeatures
		inputs["labelFingerprint"] = state.LabelFingerprint
		inputs["labels"] = state.Labels
		inputs["licenses"] = state.Licenses
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["rawDisk"] = state.RawDisk
		inputs["selfLink"] = state.SelfLink
		inputs["sourceDisk"] = state.SourceDisk
	}
	s, err := ctx.ReadResource("gcp:compute/image:Image", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Image{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Image) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Image) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Size of the image tar.gz archive stored in Google Cloud Storage (in bytes).
func (r *Image) ArchiveSizeBytes() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["archiveSizeBytes"])
}

// Creation timestamp in RFC3339 text format.
func (r *Image) CreationTimestamp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["creationTimestamp"])
}

// An optional description of this resource. Provide this property when you create the resource.
func (r *Image) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Size of the image when restored onto a persistent disk (in GB).
func (r *Image) DiskSizeGb() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["diskSizeGb"])
}

// The name of the image family to which this image belongs. You can create disks by specifying an image family instead of
// a specific image name. The image family always returns its latest image that is not deprecated. The name of the image
// family must comply with RFC1035.
func (r *Image) Family() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["family"])
}

// A list of features to enable on the guest operating system. Applicable only for bootable images.
func (r *Image) GuestOsFeatures() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["guestOsFeatures"])
}

// The fingerprint used for optimistic locking of this resource. Used internally during updates.
func (r *Image) LabelFingerprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["labelFingerprint"])
}

// Labels to apply to this Image.
func (r *Image) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

// Any applicable license URI.
func (r *Image) Licenses() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["licenses"])
}

// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and
// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (r *Image) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Image) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The parameters of the raw disk image.
func (r *Image) RawDisk() *pulumi.Output {
	return r.s.State["rawDisk"]
}

// The URI of the created resource.
func (r *Image) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// The source disk to create this image based on. You must provide either this property or the rawDisk.source property but
// not both to create an image.
func (r *Image) SourceDisk() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceDisk"])
}

// Input properties used for looking up and filtering Image resources.
type ImageState struct {
	// Size of the image tar.gz archive stored in Google Cloud Storage (in bytes).
	ArchiveSizeBytes interface{}
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp interface{}
	// An optional description of this resource. Provide this property when you create the resource.
	Description interface{}
	// Size of the image when restored onto a persistent disk (in GB).
	DiskSizeGb interface{}
	// The name of the image family to which this image belongs. You can create disks by specifying an image family instead of
	// a specific image name. The image family always returns its latest image that is not deprecated. The name of the image
	// family must comply with RFC1035.
	Family interface{}
	// A list of features to enable on the guest operating system. Applicable only for bootable images.
	GuestOsFeatures interface{}
	// The fingerprint used for optimistic locking of this resource. Used internally during updates.
	LabelFingerprint interface{}
	// Labels to apply to this Image.
	Labels interface{}
	// Any applicable license URI.
	Licenses interface{}
	// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The parameters of the raw disk image.
	RawDisk interface{}
	// The URI of the created resource.
	SelfLink interface{}
	// The source disk to create this image based on. You must provide either this property or the rawDisk.source property but
	// not both to create an image.
	SourceDisk interface{}
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description interface{}
	// Size of the image when restored onto a persistent disk (in GB).
	DiskSizeGb interface{}
	// The name of the image family to which this image belongs. You can create disks by specifying an image family instead of
	// a specific image name. The image family always returns its latest image that is not deprecated. The name of the image
	// family must comply with RFC1035.
	Family interface{}
	// A list of features to enable on the guest operating system. Applicable only for bootable images.
	GuestOsFeatures interface{}
	// Labels to apply to this Image.
	Labels interface{}
	// Any applicable license URI.
	Licenses interface{}
	// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The parameters of the raw disk image.
	RawDisk interface{}
	// The source disk to create this image based on. You must provide either this property or the rawDisk.source property but
	// not both to create an image.
	SourceDisk interface{}
}
