// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_firewall.html.markdown.
type Firewall struct {
	s *pulumi.ResourceState
}

// NewFirewall registers a new resource with the given unique name, arguments, and options.
func NewFirewall(ctx *pulumi.Context,
	name string, args *FirewallArgs, opts ...pulumi.ResourceOpt) (*Firewall, error) {
	if args == nil || args.Network == nil {
		return nil, errors.New("missing required argument 'Network'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allows"] = nil
		inputs["denies"] = nil
		inputs["description"] = nil
		inputs["destinationRanges"] = nil
		inputs["direction"] = nil
		inputs["disabled"] = nil
		inputs["enableLogging"] = nil
		inputs["name"] = nil
		inputs["network"] = nil
		inputs["priority"] = nil
		inputs["project"] = nil
		inputs["sourceRanges"] = nil
		inputs["sourceServiceAccounts"] = nil
		inputs["sourceTags"] = nil
		inputs["targetServiceAccounts"] = nil
		inputs["targetTags"] = nil
	} else {
		inputs["allows"] = args.Allows
		inputs["denies"] = args.Denies
		inputs["description"] = args.Description
		inputs["destinationRanges"] = args.DestinationRanges
		inputs["direction"] = args.Direction
		inputs["disabled"] = args.Disabled
		inputs["enableLogging"] = args.EnableLogging
		inputs["name"] = args.Name
		inputs["network"] = args.Network
		inputs["priority"] = args.Priority
		inputs["project"] = args.Project
		inputs["sourceRanges"] = args.SourceRanges
		inputs["sourceServiceAccounts"] = args.SourceServiceAccounts
		inputs["sourceTags"] = args.SourceTags
		inputs["targetServiceAccounts"] = args.TargetServiceAccounts
		inputs["targetTags"] = args.TargetTags
	}
	inputs["creationTimestamp"] = nil
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/firewall:Firewall", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Firewall{s: s}, nil
}

// GetFirewall gets an existing Firewall resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewall(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FirewallState, opts ...pulumi.ResourceOpt) (*Firewall, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allows"] = state.Allows
		inputs["creationTimestamp"] = state.CreationTimestamp
		inputs["denies"] = state.Denies
		inputs["description"] = state.Description
		inputs["destinationRanges"] = state.DestinationRanges
		inputs["direction"] = state.Direction
		inputs["disabled"] = state.Disabled
		inputs["enableLogging"] = state.EnableLogging
		inputs["name"] = state.Name
		inputs["network"] = state.Network
		inputs["priority"] = state.Priority
		inputs["project"] = state.Project
		inputs["selfLink"] = state.SelfLink
		inputs["sourceRanges"] = state.SourceRanges
		inputs["sourceServiceAccounts"] = state.SourceServiceAccounts
		inputs["sourceTags"] = state.SourceTags
		inputs["targetServiceAccounts"] = state.TargetServiceAccounts
		inputs["targetTags"] = state.TargetTags
	}
	s, err := ctx.ReadResource("gcp:compute/firewall:Firewall", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Firewall{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Firewall) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Firewall) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The list of ALLOW rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a
// permitted connection.
func (r *Firewall) Allows() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["allows"])
}

// Creation timestamp in RFC3339 text format.
func (r *Firewall) CreationTimestamp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["creationTimestamp"])
}

// The list of DENY rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a
// denied connection.
func (r *Firewall) Denies() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["denies"])
}

// An optional description of this resource. Provide this property when you create the resource.
func (r *Firewall) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// If destination ranges are specified, the firewall will apply only to traffic that has destination IP address in these
// ranges. These ranges must be expressed in CIDR format. Only IPv4 is supported.
func (r *Firewall) DestinationRanges() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["destinationRanges"])
}

// Direction of traffic to which this firewall applies; default is INGRESS. Note: For INGRESS traffic, it is NOT supported
// to specify destinationRanges; For EGRESS traffic, it is NOT supported to specify sourceRanges OR sourceTags.
func (r *Firewall) Direction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["direction"])
}

// Denotes whether the firewall rule is disabled, i.e not applied to the network it is associated with. When set to true,
// the firewall rule is not enforced and the network behaves as if it did not exist. If this is unspecified, the firewall
// rule will be enabled.
func (r *Firewall) Disabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["disabled"])
}

// This field denotes whether to enable logging for a particular firewall rule. If logging is enabled, logs will be
// exported to Stackdriver.
func (r *Firewall) EnableLogging() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableLogging"])
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (r *Firewall) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The name or self_link of the network to attach this firewall to.
func (r *Firewall) Network() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["network"])
}

// Priority for this rule. This is an integer between 0 and 65535, both inclusive. When not specified, the value assumed is
// 1000. Relative priorities determine precedence of conflicting rules. Lower value of priority implies higher precedence
// (eg, a rule with priority 0 has higher precedence than a rule with priority 1). DENY rules take precedence over ALLOW
// rules having equal priority.
func (r *Firewall) Priority() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["priority"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Firewall) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The URI of the created resource.
func (r *Firewall) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// If source ranges are specified, the firewall will apply only to traffic that has source IP address in these ranges.
// These ranges must be expressed in CIDR format. One or both of sourceRanges and sourceTags may be set. If both properties
// are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP that belongs
// to a tag listed in the sourceTags property. The connection does not need to match both properties for the firewall to
// apply. Only IPv4 is supported.
func (r *Firewall) SourceRanges() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["sourceRanges"])
}

// If source service accounts are specified, the firewall will apply only to traffic originating from an instance with a
// service account in this list. Source service accounts cannot be used to control traffic to an instance's external IP
// address because service accounts are associated with an instance, not an IP address. sourceRanges can be set at the same
// time as sourceServiceAccounts. If both are set, the firewall will apply to traffic that has source IP address within
// sourceRanges OR the source IP belongs to an instance with service account listed in sourceServiceAccount. The connection
// does not need to match both properties for the firewall to apply. sourceServiceAccounts cannot be used at the same time
// as sourceTags or targetTags.
func (r *Firewall) SourceServiceAccounts() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["sourceServiceAccounts"])
}

// If source tags are specified, the firewall will apply only to traffic with source IP that belongs to a tag listed in
// source tags. Source tags cannot be used to control traffic to an instance's external IP address. Because tags are
// associated with an instance, not an IP address. One or both of sourceRanges and sourceTags may be set. If both
// properties are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP
// that belongs to a tag listed in the sourceTags property. The connection does not need to match both properties for the
// firewall to apply.
func (r *Firewall) SourceTags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["sourceTags"])
}

// A list of service accounts indicating sets of instances located in the network that may make network connections as
// specified in allowed[]. targetServiceAccounts cannot be used at the same time as targetTags or sourceTags. If neither
// targetServiceAccounts nor targetTags are specified, the firewall rule applies to all instances on the specified network.
func (r *Firewall) TargetServiceAccounts() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["targetServiceAccounts"])
}

// A list of instance tags indicating sets of instances located in the network that may make network connections as
// specified in allowed[]. If no targetTags are specified, the firewall rule applies to all instances on the specified
// network.
func (r *Firewall) TargetTags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["targetTags"])
}

// Input properties used for looking up and filtering Firewall resources.
type FirewallState struct {
	// The list of ALLOW rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes
	// a permitted connection.
	Allows interface{}
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp interface{}
	// The list of DENY rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a
	// denied connection.
	Denies interface{}
	// An optional description of this resource. Provide this property when you create the resource.
	Description interface{}
	// If destination ranges are specified, the firewall will apply only to traffic that has destination IP address in these
	// ranges. These ranges must be expressed in CIDR format. Only IPv4 is supported.
	DestinationRanges interface{}
	// Direction of traffic to which this firewall applies; default is INGRESS. Note: For INGRESS traffic, it is NOT supported
	// to specify destinationRanges; For EGRESS traffic, it is NOT supported to specify sourceRanges OR sourceTags.
	Direction interface{}
	// Denotes whether the firewall rule is disabled, i.e not applied to the network it is associated with. When set to true,
	// the firewall rule is not enforced and the network behaves as if it did not exist. If this is unspecified, the firewall
	// rule will be enabled.
	Disabled interface{}
	// This field denotes whether to enable logging for a particular firewall rule. If logging is enabled, logs will be
	// exported to Stackdriver.
	EnableLogging interface{}
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	// The name or self_link of the network to attach this firewall to.
	Network interface{}
	// Priority for this rule. This is an integer between 0 and 65535, both inclusive. When not specified, the value assumed
	// is 1000. Relative priorities determine precedence of conflicting rules. Lower value of priority implies higher
	// precedence (eg, a rule with priority 0 has higher precedence than a rule with priority 1). DENY rules take precedence
	// over ALLOW rules having equal priority.
	Priority interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The URI of the created resource.
	SelfLink interface{}
	// If source ranges are specified, the firewall will apply only to traffic that has source IP address in these ranges.
	// These ranges must be expressed in CIDR format. One or both of sourceRanges and sourceTags may be set. If both
	// properties are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP
	// that belongs to a tag listed in the sourceTags property. The connection does not need to match both properties for the
	// firewall to apply. Only IPv4 is supported.
	SourceRanges interface{}
	// If source service accounts are specified, the firewall will apply only to traffic originating from an instance with a
	// service account in this list. Source service accounts cannot be used to control traffic to an instance's external IP
	// address because service accounts are associated with an instance, not an IP address. sourceRanges can be set at the
	// same time as sourceServiceAccounts. If both are set, the firewall will apply to traffic that has source IP address
	// within sourceRanges OR the source IP belongs to an instance with service account listed in sourceServiceAccount. The
	// connection does not need to match both properties for the firewall to apply. sourceServiceAccounts cannot be used at
	// the same time as sourceTags or targetTags.
	SourceServiceAccounts interface{}
	// If source tags are specified, the firewall will apply only to traffic with source IP that belongs to a tag listed in
	// source tags. Source tags cannot be used to control traffic to an instance's external IP address. Because tags are
	// associated with an instance, not an IP address. One or both of sourceRanges and sourceTags may be set. If both
	// properties are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP
	// that belongs to a tag listed in the sourceTags property. The connection does not need to match both properties for the
	// firewall to apply.
	SourceTags interface{}
	// A list of service accounts indicating sets of instances located in the network that may make network connections as
	// specified in allowed[]. targetServiceAccounts cannot be used at the same time as targetTags or sourceTags. If neither
	// targetServiceAccounts nor targetTags are specified, the firewall rule applies to all instances on the specified
	// network.
	TargetServiceAccounts interface{}
	// A list of instance tags indicating sets of instances located in the network that may make network connections as
	// specified in allowed[]. If no targetTags are specified, the firewall rule applies to all instances on the specified
	// network.
	TargetTags interface{}
}

// The set of arguments for constructing a Firewall resource.
type FirewallArgs struct {
	// The list of ALLOW rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes
	// a permitted connection.
	Allows interface{}
	// The list of DENY rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a
	// denied connection.
	Denies interface{}
	// An optional description of this resource. Provide this property when you create the resource.
	Description interface{}
	// If destination ranges are specified, the firewall will apply only to traffic that has destination IP address in these
	// ranges. These ranges must be expressed in CIDR format. Only IPv4 is supported.
	DestinationRanges interface{}
	// Direction of traffic to which this firewall applies; default is INGRESS. Note: For INGRESS traffic, it is NOT supported
	// to specify destinationRanges; For EGRESS traffic, it is NOT supported to specify sourceRanges OR sourceTags.
	Direction interface{}
	// Denotes whether the firewall rule is disabled, i.e not applied to the network it is associated with. When set to true,
	// the firewall rule is not enforced and the network behaves as if it did not exist. If this is unspecified, the firewall
	// rule will be enabled.
	Disabled interface{}
	// This field denotes whether to enable logging for a particular firewall rule. If logging is enabled, logs will be
	// exported to Stackdriver.
	EnableLogging interface{}
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	// The name or self_link of the network to attach this firewall to.
	Network interface{}
	// Priority for this rule. This is an integer between 0 and 65535, both inclusive. When not specified, the value assumed
	// is 1000. Relative priorities determine precedence of conflicting rules. Lower value of priority implies higher
	// precedence (eg, a rule with priority 0 has higher precedence than a rule with priority 1). DENY rules take precedence
	// over ALLOW rules having equal priority.
	Priority interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// If source ranges are specified, the firewall will apply only to traffic that has source IP address in these ranges.
	// These ranges must be expressed in CIDR format. One or both of sourceRanges and sourceTags may be set. If both
	// properties are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP
	// that belongs to a tag listed in the sourceTags property. The connection does not need to match both properties for the
	// firewall to apply. Only IPv4 is supported.
	SourceRanges interface{}
	// If source service accounts are specified, the firewall will apply only to traffic originating from an instance with a
	// service account in this list. Source service accounts cannot be used to control traffic to an instance's external IP
	// address because service accounts are associated with an instance, not an IP address. sourceRanges can be set at the
	// same time as sourceServiceAccounts. If both are set, the firewall will apply to traffic that has source IP address
	// within sourceRanges OR the source IP belongs to an instance with service account listed in sourceServiceAccount. The
	// connection does not need to match both properties for the firewall to apply. sourceServiceAccounts cannot be used at
	// the same time as sourceTags or targetTags.
	SourceServiceAccounts interface{}
	// If source tags are specified, the firewall will apply only to traffic with source IP that belongs to a tag listed in
	// source tags. Source tags cannot be used to control traffic to an instance's external IP address. Because tags are
	// associated with an instance, not an IP address. One or both of sourceRanges and sourceTags may be set. If both
	// properties are set, the firewall will apply to traffic that has source IP address within sourceRanges OR the source IP
	// that belongs to a tag listed in the sourceTags property. The connection does not need to match both properties for the
	// firewall to apply.
	SourceTags interface{}
	// A list of service accounts indicating sets of instances located in the network that may make network connections as
	// specified in allowed[]. targetServiceAccounts cannot be used at the same time as targetTags or sourceTags. If neither
	// targetServiceAccounts nor targetTags are specified, the firewall rule applies to all instances on the specified
	// network.
	TargetServiceAccounts interface{}
	// A list of instance tags indicating sets of instances located in the network that may make network connections as
	// specified in allowed[]. If no targetTags are specified, the firewall rule applies to all instances on the specified
	// network.
	TargetTags interface{}
}
