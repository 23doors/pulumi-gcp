// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_node_template.html.markdown.
type NodeTemplate struct {
	s *pulumi.ResourceState
}

// NewNodeTemplate registers a new resource with the given unique name, arguments, and options.
func NewNodeTemplate(ctx *pulumi.Context,
	name string, args *NodeTemplateArgs, opts ...pulumi.ResourceOpt) (*NodeTemplate, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["nodeAffinityLabels"] = nil
		inputs["nodeType"] = nil
		inputs["nodeTypeFlexibility"] = nil
		inputs["project"] = nil
		inputs["region"] = nil
		inputs["serverBinding"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["nodeAffinityLabels"] = args.NodeAffinityLabels
		inputs["nodeType"] = args.NodeType
		inputs["nodeTypeFlexibility"] = args.NodeTypeFlexibility
		inputs["project"] = args.Project
		inputs["region"] = args.Region
		inputs["serverBinding"] = args.ServerBinding
	}
	inputs["creationTimestamp"] = nil
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/nodeTemplate:NodeTemplate", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NodeTemplate{s: s}, nil
}

// GetNodeTemplate gets an existing NodeTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeTemplate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NodeTemplateState, opts ...pulumi.ResourceOpt) (*NodeTemplate, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["creationTimestamp"] = state.CreationTimestamp
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["nodeAffinityLabels"] = state.NodeAffinityLabels
		inputs["nodeType"] = state.NodeType
		inputs["nodeTypeFlexibility"] = state.NodeTypeFlexibility
		inputs["project"] = state.Project
		inputs["region"] = state.Region
		inputs["selfLink"] = state.SelfLink
		inputs["serverBinding"] = state.ServerBinding
	}
	s, err := ctx.ReadResource("gcp:compute/nodeTemplate:NodeTemplate", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NodeTemplate{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NodeTemplate) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NodeTemplate) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Creation timestamp in RFC3339 text format.
func (r *NodeTemplate) CreationTimestamp() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["creationTimestamp"])
}

// An optional textual description of the resource.
func (r *NodeTemplate) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Name of the resource.
func (r *NodeTemplate) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Labels to use for node affinity, which will be used in instance scheduling.
func (r *NodeTemplate) NodeAffinityLabels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["nodeAffinityLabels"])
}

// Node type to use for nodes group that are created from this template. Only one of nodeTypeFlexibility and nodeType can
// be specified.
func (r *NodeTemplate) NodeType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["nodeType"])
}

// Flexible properties for the desired node type. Node groups that use this node template will create nodes of a type that
// matches these properties. Only one of nodeTypeFlexibility and nodeType can be specified.
func (r *NodeTemplate) NodeTypeFlexibility() pulumi.Output {
	return r.s.State["nodeTypeFlexibility"]
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *NodeTemplate) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Region where nodes using the node template will be created. If it is not provided, the provider region is used.
func (r *NodeTemplate) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// The URI of the created resource.
func (r *NodeTemplate) SelfLink() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["selfLink"])
}

// The server binding policy for nodes using this template. Determines where the nodes should restart following a
// maintenance event.
func (r *NodeTemplate) ServerBinding() pulumi.Output {
	return r.s.State["serverBinding"]
}

// Input properties used for looking up and filtering NodeTemplate resources.
type NodeTemplateState struct {
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp interface{}
	// An optional textual description of the resource.
	Description interface{}
	// Name of the resource.
	Name interface{}
	// Labels to use for node affinity, which will be used in instance scheduling.
	NodeAffinityLabels interface{}
	// Node type to use for nodes group that are created from this template. Only one of nodeTypeFlexibility and nodeType can
	// be specified.
	NodeType interface{}
	// Flexible properties for the desired node type. Node groups that use this node template will create nodes of a type that
	// matches these properties. Only one of nodeTypeFlexibility and nodeType can be specified.
	NodeTypeFlexibility interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// Region where nodes using the node template will be created. If it is not provided, the provider region is used.
	Region interface{}
	// The URI of the created resource.
	SelfLink interface{}
	// The server binding policy for nodes using this template. Determines where the nodes should restart following a
	// maintenance event.
	ServerBinding interface{}
}

// The set of arguments for constructing a NodeTemplate resource.
type NodeTemplateArgs struct {
	// An optional textual description of the resource.
	Description interface{}
	// Name of the resource.
	Name interface{}
	// Labels to use for node affinity, which will be used in instance scheduling.
	NodeAffinityLabels interface{}
	// Node type to use for nodes group that are created from this template. Only one of nodeTypeFlexibility and nodeType can
	// be specified.
	NodeType interface{}
	// Flexible properties for the desired node type. Node groups that use this node template will create nodes of a type that
	// matches these properties. Only one of nodeTypeFlexibility and nodeType can be specified.
	NodeTypeFlexibility interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// Region where nodes using the node template will be created. If it is not provided, the provider region is used.
	Region interface{}
	// The server binding policy for nodes using this template. Determines where the nodes should restart following a
	// maintenance event.
	ServerBinding interface{}
}
