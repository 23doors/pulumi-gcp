// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_global_forwarding_rule.html.markdown.
type GlobalForwardingRule struct {
	s *pulumi.ResourceState
}

// NewGlobalForwardingRule registers a new resource with the given unique name, arguments, and options.
func NewGlobalForwardingRule(ctx *pulumi.Context,
	name string, args *GlobalForwardingRuleArgs, opts ...pulumi.ResourceOpt) (*GlobalForwardingRule, error) {
	if args == nil || args.Target == nil {
		return nil, errors.New("missing required argument 'Target'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["ipAddress"] = nil
		inputs["ipProtocol"] = nil
		inputs["ipVersion"] = nil
		inputs["labels"] = nil
		inputs["loadBalancingScheme"] = nil
		inputs["metadataFilters"] = nil
		inputs["name"] = nil
		inputs["network"] = nil
		inputs["portRange"] = nil
		inputs["project"] = nil
		inputs["target"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["ipAddress"] = args.IpAddress
		inputs["ipProtocol"] = args.IpProtocol
		inputs["ipVersion"] = args.IpVersion
		inputs["labels"] = args.Labels
		inputs["loadBalancingScheme"] = args.LoadBalancingScheme
		inputs["metadataFilters"] = args.MetadataFilters
		inputs["name"] = args.Name
		inputs["network"] = args.Network
		inputs["portRange"] = args.PortRange
		inputs["project"] = args.Project
		inputs["target"] = args.Target
	}
	inputs["labelFingerprint"] = nil
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/globalForwardingRule:GlobalForwardingRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GlobalForwardingRule{s: s}, nil
}

// GetGlobalForwardingRule gets an existing GlobalForwardingRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalForwardingRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GlobalForwardingRuleState, opts ...pulumi.ResourceOpt) (*GlobalForwardingRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["ipAddress"] = state.IpAddress
		inputs["ipProtocol"] = state.IpProtocol
		inputs["ipVersion"] = state.IpVersion
		inputs["labelFingerprint"] = state.LabelFingerprint
		inputs["labels"] = state.Labels
		inputs["loadBalancingScheme"] = state.LoadBalancingScheme
		inputs["metadataFilters"] = state.MetadataFilters
		inputs["name"] = state.Name
		inputs["network"] = state.Network
		inputs["portRange"] = state.PortRange
		inputs["project"] = state.Project
		inputs["selfLink"] = state.SelfLink
		inputs["target"] = state.Target
	}
	s, err := ctx.ReadResource("gcp:compute/globalForwardingRule:GlobalForwardingRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GlobalForwardingRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *GlobalForwardingRule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *GlobalForwardingRule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// An optional description of this resource. Provide this property when you create the resource.
func (r *GlobalForwardingRule) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The IP address that this forwarding rule is serving on behalf of. Addresses are restricted based on the forwarding
// rule's load balancing scheme (EXTERNAL or INTERNAL) and scope (global or regional). When the load balancing scheme is
// EXTERNAL, for global forwarding rules, the address must be a global IP, and for regional forwarding rules, the address
// must live in the same region as the forwarding rule. If this field is empty, an ephemeral IPv4 address from the same
// scope (global or regional) will be assigned. A regional forwarding rule supports IPv4 only. A global forwarding rule
// supports either IPv4 or IPv6. When the load balancing scheme is INTERNAL, this can only be an RFC 1918 IP address
// belonging to the network/subnet configured for the forwarding rule. By default, if this field is empty, an ephemeral
// internal IP address will be automatically allocated from the IP range of the subnet or network configured for this
// forwarding rule. ~> **NOTE** The address should be specified as a literal IP address, e.g. '100.1.2.3' to avoid a
// permanent diff, as the server returns the IP address regardless of the input value. The server accepts a literal IP
// address or a URL reference to an existing Address resource. The following examples are all valid but only the first will
// prevent a permadiff. If you are using 'google_compute_address' or similar, interpolate using '.address' instead of
// '.self_link' or similar to prevent a diff on re-apply.
func (r *GlobalForwardingRule) IpAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipAddress"])
}

// The IP protocol to which this rule applies. Valid options are TCP, UDP, ESP, AH, SCTP or ICMP. When the load balancing
// scheme is INTERNAL_SELF_MANAGED, only TCP is valid.
func (r *GlobalForwardingRule) IpProtocol() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipProtocol"])
}

// The IP Version that will be used by this global forwarding rule. Valid options are IPV4 or IPV6.
func (r *GlobalForwardingRule) IpVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipVersion"])
}

// The fingerprint used for optimistic locking of this resource. Used internally during updates.
func (r *GlobalForwardingRule) LabelFingerprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["labelFingerprint"])
}

// Labels to apply to this forwarding rule. A list of key->value pairs.
func (r *GlobalForwardingRule) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

// This signifies what the GlobalForwardingRule will be used for. The value of INTERNAL_SELF_MANAGED means that this will
// be used for Internal Global HTTP(S) LB. The value of EXTERNAL means that this will be used for External Global Load
// Balancing (HTTP(S) LB, External TCP/UDP LB, SSL Proxy) NOTE: Currently global forwarding rules cannot be used for
// INTERNAL load balancing.
func (r *GlobalForwardingRule) LoadBalancingScheme() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loadBalancingScheme"])
}

// Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set xDS compliant clients. In
// their xDS requests to Loadbalancer, xDS clients present node metadata. If a match takes place, the relevant routing
// configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is
// set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its
// filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels in the
// provided metadata. metadataFilters specified here can be overridden by those specified in the UrlMap that this
// ForwardingRule references. metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to
// INTERNAL_SELF_MANAGED.
func (r *GlobalForwardingRule) MetadataFilters() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["metadataFilters"])
}

// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and
// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (r *GlobalForwardingRule) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// This field is not used for external load balancing. For INTERNAL_SELF_MANAGED load balancing, this field identifies the
// network that the load balanced IP should belong to for this global forwarding rule. If this field is not specified, the
// default network will be used.
func (r *GlobalForwardingRule) Network() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["network"])
}

// This field is used along with the target field for TargetHttpProxy, TargetHttpsProxy, TargetSslProxy, TargetTcpProxy,
// TargetVpnGateway, TargetPool, TargetInstance. Applicable only when IPProtocol is TCP, UDP, or SCTP, only packets
// addressed to ports in the specified range will be forwarded to target. Forwarding rules with the same [IPAddress,
// IPProtocol] pair must have disjoint port ranges. Some types of forwarding target have constraints on the acceptable
// ports: * TargetHttpProxy: 80, 8080 * TargetHttpsProxy: 443 * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700,
// 993, 995, 1883, 5222 * TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1883, 5222 *
// TargetVpnGateway: 500, 4500
func (r *GlobalForwardingRule) PortRange() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["portRange"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *GlobalForwardingRule) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The URI of the created resource.
func (r *GlobalForwardingRule) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// The URL of the target resource to receive the matched traffic. The forwarded traffic must be of a type appropriate to
// the target object. For INTERNAL_SELF_MANAGED load balancing, only HTTP and HTTPS targets are valid.
func (r *GlobalForwardingRule) Target() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["target"])
}

// Input properties used for looking up and filtering GlobalForwardingRule resources.
type GlobalForwardingRuleState struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description interface{}
	// The IP address that this forwarding rule is serving on behalf of. Addresses are restricted based on the forwarding
	// rule's load balancing scheme (EXTERNAL or INTERNAL) and scope (global or regional). When the load balancing scheme is
	// EXTERNAL, for global forwarding rules, the address must be a global IP, and for regional forwarding rules, the address
	// must live in the same region as the forwarding rule. If this field is empty, an ephemeral IPv4 address from the same
	// scope (global or regional) will be assigned. A regional forwarding rule supports IPv4 only. A global forwarding rule
	// supports either IPv4 or IPv6. When the load balancing scheme is INTERNAL, this can only be an RFC 1918 IP address
	// belonging to the network/subnet configured for the forwarding rule. By default, if this field is empty, an ephemeral
	// internal IP address will be automatically allocated from the IP range of the subnet or network configured for this
	// forwarding rule. ~> **NOTE** The address should be specified as a literal IP address, e.g. '100.1.2.3' to avoid a
	// permanent diff, as the server returns the IP address regardless of the input value. The server accepts a literal IP
	// address or a URL reference to an existing Address resource. The following examples are all valid but only the first
	// will prevent a permadiff. If you are using 'google_compute_address' or similar, interpolate using '.address' instead of
	// '.self_link' or similar to prevent a diff on re-apply.
	IpAddress interface{}
	// The IP protocol to which this rule applies. Valid options are TCP, UDP, ESP, AH, SCTP or ICMP. When the load balancing
	// scheme is INTERNAL_SELF_MANAGED, only TCP is valid.
	IpProtocol interface{}
	// The IP Version that will be used by this global forwarding rule. Valid options are IPV4 or IPV6.
	IpVersion interface{}
	// The fingerprint used for optimistic locking of this resource. Used internally during updates.
	LabelFingerprint interface{}
	// Labels to apply to this forwarding rule. A list of key->value pairs.
	Labels interface{}
	// This signifies what the GlobalForwardingRule will be used for. The value of INTERNAL_SELF_MANAGED means that this will
	// be used for Internal Global HTTP(S) LB. The value of EXTERNAL means that this will be used for External Global Load
	// Balancing (HTTP(S) LB, External TCP/UDP LB, SSL Proxy) NOTE: Currently global forwarding rules cannot be used for
	// INTERNAL load balancing.
	LoadBalancingScheme interface{}
	// Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set xDS compliant clients.
	// In their xDS requests to Loadbalancer, xDS clients present node metadata. If a match takes place, the relevant routing
	// configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is
	// set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its
	// filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels in the
	// provided metadata. metadataFilters specified here can be overridden by those specified in the UrlMap that this
	// ForwardingRule references. metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to
	// INTERNAL_SELF_MANAGED.
	MetadataFilters interface{}
	// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	// This field is not used for external load balancing. For INTERNAL_SELF_MANAGED load balancing, this field identifies the
	// network that the load balanced IP should belong to for this global forwarding rule. If this field is not specified, the
	// default network will be used.
	Network interface{}
	// This field is used along with the target field for TargetHttpProxy, TargetHttpsProxy, TargetSslProxy, TargetTcpProxy,
	// TargetVpnGateway, TargetPool, TargetInstance. Applicable only when IPProtocol is TCP, UDP, or SCTP, only packets
	// addressed to ports in the specified range will be forwarded to target. Forwarding rules with the same [IPAddress,
	// IPProtocol] pair must have disjoint port ranges. Some types of forwarding target have constraints on the acceptable
	// ports: * TargetHttpProxy: 80, 8080 * TargetHttpsProxy: 443 * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700,
	// 993, 995, 1883, 5222 * TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1883, 5222 *
	// TargetVpnGateway: 500, 4500
	PortRange interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The URI of the created resource.
	SelfLink interface{}
	// The URL of the target resource to receive the matched traffic. The forwarded traffic must be of a type appropriate to
	// the target object. For INTERNAL_SELF_MANAGED load balancing, only HTTP and HTTPS targets are valid.
	Target interface{}
}

// The set of arguments for constructing a GlobalForwardingRule resource.
type GlobalForwardingRuleArgs struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description interface{}
	// The IP address that this forwarding rule is serving on behalf of. Addresses are restricted based on the forwarding
	// rule's load balancing scheme (EXTERNAL or INTERNAL) and scope (global or regional). When the load balancing scheme is
	// EXTERNAL, for global forwarding rules, the address must be a global IP, and for regional forwarding rules, the address
	// must live in the same region as the forwarding rule. If this field is empty, an ephemeral IPv4 address from the same
	// scope (global or regional) will be assigned. A regional forwarding rule supports IPv4 only. A global forwarding rule
	// supports either IPv4 or IPv6. When the load balancing scheme is INTERNAL, this can only be an RFC 1918 IP address
	// belonging to the network/subnet configured for the forwarding rule. By default, if this field is empty, an ephemeral
	// internal IP address will be automatically allocated from the IP range of the subnet or network configured for this
	// forwarding rule. ~> **NOTE** The address should be specified as a literal IP address, e.g. '100.1.2.3' to avoid a
	// permanent diff, as the server returns the IP address regardless of the input value. The server accepts a literal IP
	// address or a URL reference to an existing Address resource. The following examples are all valid but only the first
	// will prevent a permadiff. If you are using 'google_compute_address' or similar, interpolate using '.address' instead of
	// '.self_link' or similar to prevent a diff on re-apply.
	IpAddress interface{}
	// The IP protocol to which this rule applies. Valid options are TCP, UDP, ESP, AH, SCTP or ICMP. When the load balancing
	// scheme is INTERNAL_SELF_MANAGED, only TCP is valid.
	IpProtocol interface{}
	// The IP Version that will be used by this global forwarding rule. Valid options are IPV4 or IPV6.
	IpVersion interface{}
	// Labels to apply to this forwarding rule. A list of key->value pairs.
	Labels interface{}
	// This signifies what the GlobalForwardingRule will be used for. The value of INTERNAL_SELF_MANAGED means that this will
	// be used for Internal Global HTTP(S) LB. The value of EXTERNAL means that this will be used for External Global Load
	// Balancing (HTTP(S) LB, External TCP/UDP LB, SSL Proxy) NOTE: Currently global forwarding rules cannot be used for
	// INTERNAL load balancing.
	LoadBalancingScheme interface{}
	// Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set xDS compliant clients.
	// In their xDS requests to Loadbalancer, xDS clients present node metadata. If a match takes place, the relevant routing
	// configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is
	// set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its
	// filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels in the
	// provided metadata. metadataFilters specified here can be overridden by those specified in the UrlMap that this
	// ForwardingRule references. metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to
	// INTERNAL_SELF_MANAGED.
	MetadataFilters interface{}
	// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	// This field is not used for external load balancing. For INTERNAL_SELF_MANAGED load balancing, this field identifies the
	// network that the load balanced IP should belong to for this global forwarding rule. If this field is not specified, the
	// default network will be used.
	Network interface{}
	// This field is used along with the target field for TargetHttpProxy, TargetHttpsProxy, TargetSslProxy, TargetTcpProxy,
	// TargetVpnGateway, TargetPool, TargetInstance. Applicable only when IPProtocol is TCP, UDP, or SCTP, only packets
	// addressed to ports in the specified range will be forwarded to target. Forwarding rules with the same [IPAddress,
	// IPProtocol] pair must have disjoint port ranges. Some types of forwarding target have constraints on the acceptable
	// ports: * TargetHttpProxy: 80, 8080 * TargetHttpsProxy: 443 * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700,
	// 993, 995, 1883, 5222 * TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995, 1883, 5222 *
	// TargetVpnGateway: 500, 4500
	PortRange interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The URL of the target resource to receive the matched traffic. The forwarded traffic must be of a type appropriate to
	// the target object. For INTERNAL_SELF_MANAGED load balancing, only HTTP and HTTPS targets are valid.
	Target interface{}
}
