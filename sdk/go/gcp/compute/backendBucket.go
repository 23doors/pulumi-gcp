// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_backend_bucket.html.markdown.
type BackendBucket struct {
	s *pulumi.ResourceState
}

// NewBackendBucket registers a new resource with the given unique name, arguments, and options.
func NewBackendBucket(ctx *pulumi.Context,
	name string, args *BackendBucketArgs, opts ...pulumi.ResourceOpt) (*BackendBucket, error) {
	if args == nil || args.BucketName == nil {
		return nil, errors.New("missing required argument 'BucketName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["bucketName"] = nil
		inputs["cdnPolicy"] = nil
		inputs["description"] = nil
		inputs["enableCdn"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
	} else {
		inputs["bucketName"] = args.BucketName
		inputs["cdnPolicy"] = args.CdnPolicy
		inputs["description"] = args.Description
		inputs["enableCdn"] = args.EnableCdn
		inputs["name"] = args.Name
		inputs["project"] = args.Project
	}
	inputs["creationTimestamp"] = nil
	inputs["selfLink"] = nil
	s, err := ctx.RegisterResource("gcp:compute/backendBucket:BackendBucket", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BackendBucket{s: s}, nil
}

// GetBackendBucket gets an existing BackendBucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendBucket(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BackendBucketState, opts ...pulumi.ResourceOpt) (*BackendBucket, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["bucketName"] = state.BucketName
		inputs["cdnPolicy"] = state.CdnPolicy
		inputs["creationTimestamp"] = state.CreationTimestamp
		inputs["description"] = state.Description
		inputs["enableCdn"] = state.EnableCdn
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["selfLink"] = state.SelfLink
	}
	s, err := ctx.ReadResource("gcp:compute/backendBucket:BackendBucket", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BackendBucket{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *BackendBucket) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *BackendBucket) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Cloud Storage bucket name.
func (r *BackendBucket) BucketName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["bucketName"])
}

// Cloud CDN configuration for this Backend Bucket.
func (r *BackendBucket) CdnPolicy() pulumi.Output {
	return r.s.State["cdnPolicy"]
}

// Creation timestamp in RFC3339 text format.
func (r *BackendBucket) CreationTimestamp() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["creationTimestamp"])
}

// An optional textual description of the resource; provided by the client when the resource is created.
func (r *BackendBucket) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// If true, enable Cloud CDN for this BackendBucket.
func (r *BackendBucket) EnableCdn() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enableCdn"])
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (r *BackendBucket) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *BackendBucket) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// The URI of the created resource.
func (r *BackendBucket) SelfLink() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["selfLink"])
}

// Input properties used for looking up and filtering BackendBucket resources.
type BackendBucketState struct {
	// Cloud Storage bucket name.
	BucketName interface{}
	// Cloud CDN configuration for this Backend Bucket.
	CdnPolicy interface{}
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp interface{}
	// An optional textual description of the resource; provided by the client when the resource is created.
	Description interface{}
	// If true, enable Cloud CDN for this BackendBucket.
	EnableCdn interface{}
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The URI of the created resource.
	SelfLink interface{}
}

// The set of arguments for constructing a BackendBucket resource.
type BackendBucketArgs struct {
	// Cloud Storage bucket name.
	BucketName interface{}
	// Cloud CDN configuration for this Backend Bucket.
	CdnPolicy interface{}
	// An optional textual description of the resource; provided by the client when the resource is created.
	Description interface{}
	// If true, enable Cloud CDN for this BackendBucket.
	EnableCdn interface{}
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
}
