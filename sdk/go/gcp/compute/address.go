// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_address.html.markdown.
type Address struct {
	s *pulumi.ResourceState
}

// NewAddress registers a new resource with the given unique name, arguments, and options.
func NewAddress(ctx *pulumi.Context,
	name string, args *AddressArgs, opts ...pulumi.ResourceOpt) (*Address, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["address"] = nil
		inputs["addressType"] = nil
		inputs["description"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["networkTier"] = nil
		inputs["project"] = nil
		inputs["purpose"] = nil
		inputs["region"] = nil
		inputs["subnetwork"] = nil
	} else {
		inputs["address"] = args.Address
		inputs["addressType"] = args.AddressType
		inputs["description"] = args.Description
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["networkTier"] = args.NetworkTier
		inputs["project"] = args.Project
		inputs["purpose"] = args.Purpose
		inputs["region"] = args.Region
		inputs["subnetwork"] = args.Subnetwork
	}
	inputs["creationTimestamp"] = nil
	inputs["labelFingerprint"] = nil
	inputs["selfLink"] = nil
	inputs["users"] = nil
	s, err := ctx.RegisterResource("gcp:compute/address:Address", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Address{s: s}, nil
}

// GetAddress gets an existing Address resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAddress(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AddressState, opts ...pulumi.ResourceOpt) (*Address, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["address"] = state.Address
		inputs["addressType"] = state.AddressType
		inputs["creationTimestamp"] = state.CreationTimestamp
		inputs["description"] = state.Description
		inputs["labelFingerprint"] = state.LabelFingerprint
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["networkTier"] = state.NetworkTier
		inputs["project"] = state.Project
		inputs["purpose"] = state.Purpose
		inputs["region"] = state.Region
		inputs["selfLink"] = state.SelfLink
		inputs["subnetwork"] = state.Subnetwork
		inputs["users"] = state.Users
	}
	s, err := ctx.ReadResource("gcp:compute/address:Address", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Address{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Address) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Address) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The IP of the created resource.
func (r *Address) Address() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["address"])
}

// The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.
func (r *Address) AddressType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["addressType"])
}

// Creation timestamp in RFC3339 text format.
func (r *Address) CreationTimestamp() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["creationTimestamp"])
}

// An optional description of this resource.
func (r *Address) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The fingerprint used for optimistic locking of this resource. Used internally during updates.
func (r *Address) LabelFingerprint() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["labelFingerprint"])
}

// Labels to apply to this address. A list of key->value pairs.
func (r *Address) Labels() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["labels"])
}

// Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be
// 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must
// be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last
// character, which cannot be a dash.
func (r *Address) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The networking tier used for configuring this address. This field can take the following values: PREMIUM or STANDARD. If
// this field is not specified, it is assumed to be PREMIUM.
func (r *Address) NetworkTier() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["networkTier"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Address) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// The purpose of this resource, which can be one of the following values: - GCE_ENDPOINT for addresses that are used by VM
// instances, alias IP ranges, internal load balancers, and similar resources. This should only be set when using an
// Internal address.
func (r *Address) Purpose() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["purpose"])
}

// The Region in which the created address should reside. If it is not provided, the provider region is used.
func (r *Address) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// The URI of the created resource.
func (r *Address) SelfLink() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["selfLink"])
}

// The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the
// subnetwork's IP range. This field can only be used with INTERNAL type with GCE_ENDPOINT/DNS_RESOLVER purposes.
func (r *Address) Subnetwork() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["subnetwork"])
}

// The URLs of the resources that are using this address.
func (r *Address) Users() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["users"])
}

// Input properties used for looking up and filtering Address resources.
type AddressState struct {
	// The IP of the created resource.
	Address interface{}
	// The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.
	AddressType interface{}
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp interface{}
	// An optional description of this resource.
	Description interface{}
	// The fingerprint used for optimistic locking of this resource. Used internally during updates.
	LabelFingerprint interface{}
	// Labels to apply to this address. A list of key->value pairs.
	Labels interface{}
	// Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be
	// 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must
	// be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name interface{}
	// The networking tier used for configuring this address. This field can take the following values: PREMIUM or STANDARD.
	// If this field is not specified, it is assumed to be PREMIUM.
	NetworkTier interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The purpose of this resource, which can be one of the following values: - GCE_ENDPOINT for addresses that are used by
	// VM instances, alias IP ranges, internal load balancers, and similar resources. This should only be set when using an
	// Internal address.
	Purpose interface{}
	// The Region in which the created address should reside. If it is not provided, the provider region is used.
	Region interface{}
	// The URI of the created resource.
	SelfLink interface{}
	// The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the
	// subnetwork's IP range. This field can only be used with INTERNAL type with GCE_ENDPOINT/DNS_RESOLVER purposes.
	Subnetwork interface{}
	// The URLs of the resources that are using this address.
	Users interface{}
}

// The set of arguments for constructing a Address resource.
type AddressArgs struct {
	// The IP of the created resource.
	Address interface{}
	// The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.
	AddressType interface{}
	// An optional description of this resource.
	Description interface{}
	// Labels to apply to this address. A list of key->value pairs.
	Labels interface{}
	// Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be
	// 1-63 characters long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must
	// be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	Name interface{}
	// The networking tier used for configuring this address. This field can take the following values: PREMIUM or STANDARD.
	// If this field is not specified, it is assumed to be PREMIUM.
	NetworkTier interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The purpose of this resource, which can be one of the following values: - GCE_ENDPOINT for addresses that are used by
	// VM instances, alias IP ranges, internal load balancers, and similar resources. This should only be set when using an
	// Internal address.
	Purpose interface{}
	// The Region in which the created address should reside. If it is not provided, the provider region is used.
	Region interface{}
	// The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the
	// subnetwork's IP range. This field can only be used with INTERNAL type with GCE_ENDPOINT/DNS_RESOLVER purposes.
	Subnetwork interface{}
}
