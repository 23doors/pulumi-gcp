// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_health_check.html.markdown.
type HealthCheck struct {
	s *pulumi.ResourceState
}

// NewHealthCheck registers a new resource with the given unique name, arguments, and options.
func NewHealthCheck(ctx *pulumi.Context,
	name string, args *HealthCheckArgs, opts ...pulumi.ResourceOpt) (*HealthCheck, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["checkIntervalSec"] = nil
		inputs["description"] = nil
		inputs["healthyThreshold"] = nil
		inputs["http2HealthCheck"] = nil
		inputs["httpHealthCheck"] = nil
		inputs["httpsHealthCheck"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
		inputs["sslHealthCheck"] = nil
		inputs["tcpHealthCheck"] = nil
		inputs["timeoutSec"] = nil
		inputs["unhealthyThreshold"] = nil
	} else {
		inputs["checkIntervalSec"] = args.CheckIntervalSec
		inputs["description"] = args.Description
		inputs["healthyThreshold"] = args.HealthyThreshold
		inputs["http2HealthCheck"] = args.Http2HealthCheck
		inputs["httpHealthCheck"] = args.HttpHealthCheck
		inputs["httpsHealthCheck"] = args.HttpsHealthCheck
		inputs["name"] = args.Name
		inputs["project"] = args.Project
		inputs["sslHealthCheck"] = args.SslHealthCheck
		inputs["tcpHealthCheck"] = args.TcpHealthCheck
		inputs["timeoutSec"] = args.TimeoutSec
		inputs["unhealthyThreshold"] = args.UnhealthyThreshold
	}
	inputs["creationTimestamp"] = nil
	inputs["selfLink"] = nil
	inputs["type"] = nil
	s, err := ctx.RegisterResource("gcp:compute/healthCheck:HealthCheck", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &HealthCheck{s: s}, nil
}

// GetHealthCheck gets an existing HealthCheck resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHealthCheck(ctx *pulumi.Context,
	name string, id pulumi.ID, state *HealthCheckState, opts ...pulumi.ResourceOpt) (*HealthCheck, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["checkIntervalSec"] = state.CheckIntervalSec
		inputs["creationTimestamp"] = state.CreationTimestamp
		inputs["description"] = state.Description
		inputs["healthyThreshold"] = state.HealthyThreshold
		inputs["http2HealthCheck"] = state.Http2HealthCheck
		inputs["httpHealthCheck"] = state.HttpHealthCheck
		inputs["httpsHealthCheck"] = state.HttpsHealthCheck
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["selfLink"] = state.SelfLink
		inputs["sslHealthCheck"] = state.SslHealthCheck
		inputs["tcpHealthCheck"] = state.TcpHealthCheck
		inputs["timeoutSec"] = state.TimeoutSec
		inputs["type"] = state.Type
		inputs["unhealthyThreshold"] = state.UnhealthyThreshold
	}
	s, err := ctx.ReadResource("gcp:compute/healthCheck:HealthCheck", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &HealthCheck{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *HealthCheck) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *HealthCheck) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// How often (in seconds) to send a health check. The default value is 5 seconds.
func (r *HealthCheck) CheckIntervalSec() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["checkIntervalSec"])
}

// Creation timestamp in RFC3339 text format.
func (r *HealthCheck) CreationTimestamp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["creationTimestamp"])
}

// An optional description of this resource. Provide this property when you create the resource.
func (r *HealthCheck) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
func (r *HealthCheck) HealthyThreshold() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["healthyThreshold"])
}

// A nested object resource
func (r *HealthCheck) Http2HealthCheck() *pulumi.Output {
	return r.s.State["http2HealthCheck"]
}

// A nested object resource
func (r *HealthCheck) HttpHealthCheck() *pulumi.Output {
	return r.s.State["httpHealthCheck"]
}

// A nested object resource
func (r *HealthCheck) HttpsHealthCheck() *pulumi.Output {
	return r.s.State["httpsHealthCheck"]
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (r *HealthCheck) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *HealthCheck) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The URI of the created resource.
func (r *HealthCheck) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// A nested object resource
func (r *HealthCheck) SslHealthCheck() *pulumi.Output {
	return r.s.State["sslHealthCheck"]
}

// A nested object resource
func (r *HealthCheck) TcpHealthCheck() *pulumi.Output {
	return r.s.State["tcpHealthCheck"]
}

// How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to
// have greater value than checkIntervalSec.
func (r *HealthCheck) TimeoutSec() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["timeoutSec"])
}

// The type of the health check. One of HTTP, HTTPS, TCP, or SSL.
func (r *HealthCheck) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
func (r *HealthCheck) UnhealthyThreshold() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["unhealthyThreshold"])
}

// Input properties used for looking up and filtering HealthCheck resources.
type HealthCheckState struct {
	// How often (in seconds) to send a health check. The default value is 5 seconds.
	CheckIntervalSec interface{}
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp interface{}
	// An optional description of this resource. Provide this property when you create the resource.
	Description interface{}
	// A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
	HealthyThreshold interface{}
	// A nested object resource
	Http2HealthCheck interface{}
	// A nested object resource
	HttpHealthCheck interface{}
	// A nested object resource
	HttpsHealthCheck interface{}
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The URI of the created resource.
	SelfLink interface{}
	// A nested object resource
	SslHealthCheck interface{}
	// A nested object resource
	TcpHealthCheck interface{}
	// How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to
	// have greater value than checkIntervalSec.
	TimeoutSec interface{}
	// The type of the health check. One of HTTP, HTTPS, TCP, or SSL.
	Type interface{}
	// A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
	UnhealthyThreshold interface{}
}

// The set of arguments for constructing a HealthCheck resource.
type HealthCheckArgs struct {
	// How often (in seconds) to send a health check. The default value is 5 seconds.
	CheckIntervalSec interface{}
	// An optional description of this resource. Provide this property when you create the resource.
	Description interface{}
	// A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
	HealthyThreshold interface{}
	// A nested object resource
	Http2HealthCheck interface{}
	// A nested object resource
	HttpHealthCheck interface{}
	// A nested object resource
	HttpsHealthCheck interface{}
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// A nested object resource
	SslHealthCheck interface{}
	// A nested object resource
	TcpHealthCheck interface{}
	// How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to
	// have greater value than checkIntervalSec.
	TimeoutSec interface{}
	// A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
	UnhealthyThreshold interface{}
}
