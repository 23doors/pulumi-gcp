// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_reservation.html.markdown.
type Reservation struct {
	s *pulumi.ResourceState
}

// NewReservation registers a new resource with the given unique name, arguments, and options.
func NewReservation(ctx *pulumi.Context,
	name string, args *ReservationArgs, opts ...pulumi.ResourceOpt) (*Reservation, error) {
	if args == nil || args.SpecificReservation == nil {
		return nil, errors.New("missing required argument 'SpecificReservation'")
	}
	if args == nil || args.Zone == nil {
		return nil, errors.New("missing required argument 'Zone'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
		inputs["specificReservation"] = nil
		inputs["specificReservationRequired"] = nil
		inputs["zone"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["project"] = args.Project
		inputs["specificReservation"] = args.SpecificReservation
		inputs["specificReservationRequired"] = args.SpecificReservationRequired
		inputs["zone"] = args.Zone
	}
	inputs["commitment"] = nil
	inputs["creationTimestamp"] = nil
	inputs["selfLink"] = nil
	inputs["status"] = nil
	s, err := ctx.RegisterResource("gcp:compute/reservation:Reservation", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Reservation{s: s}, nil
}

// GetReservation gets an existing Reservation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReservation(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ReservationState, opts ...pulumi.ResourceOpt) (*Reservation, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["commitment"] = state.Commitment
		inputs["creationTimestamp"] = state.CreationTimestamp
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["selfLink"] = state.SelfLink
		inputs["specificReservation"] = state.SpecificReservation
		inputs["specificReservationRequired"] = state.SpecificReservationRequired
		inputs["status"] = state.Status
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("gcp:compute/reservation:Reservation", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Reservation{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Reservation) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Reservation) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment.
func (r *Reservation) Commitment() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["commitment"])
}

// Creation timestamp in RFC3339 text format.
func (r *Reservation) CreationTimestamp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["creationTimestamp"])
}

// An optional description of this resource.
func (r *Reservation) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (r *Reservation) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Reservation) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The URI of the created resource.
func (r *Reservation) SelfLink() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["selfLink"])
}

// Reservation for instances with specific machine shapes.
func (r *Reservation) SpecificReservation() *pulumi.Output {
	return r.s.State["specificReservation"]
}

// When set to true, only VMs that target this reservation by name can consume this reservation. Otherwise, it can be
// consumed by VMs with affinity for any reservation. Defaults to false.
func (r *Reservation) SpecificReservationRequired() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["specificReservationRequired"])
}

// The status of the reservation.
func (r *Reservation) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// The zone where the reservation is made.
func (r *Reservation) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering Reservation resources.
type ReservationState struct {
	// Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment.
	Commitment interface{}
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp interface{}
	// An optional description of this resource.
	Description interface{}
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	Project interface{}
	// The URI of the created resource.
	SelfLink interface{}
	// Reservation for instances with specific machine shapes.
	SpecificReservation interface{}
	// When set to true, only VMs that target this reservation by name can consume this reservation. Otherwise, it can be
	// consumed by VMs with affinity for any reservation. Defaults to false.
	SpecificReservationRequired interface{}
	// The status of the reservation.
	Status interface{}
	// The zone where the reservation is made.
	Zone interface{}
}

// The set of arguments for constructing a Reservation resource.
type ReservationArgs struct {
	// An optional description of this resource.
	Description interface{}
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
	// '[a-z]([-a-z0-9]*[a-z0-9])?' which means the first character must be a lowercase letter, and all following characters
	// must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name interface{}
	Project interface{}
	// Reservation for instances with specific machine shapes.
	SpecificReservation interface{}
	// When set to true, only VMs that target this reservation by name can consume this reservation. Otherwise, it can be
	// consumed by VMs with affinity for any reservation. Defaults to false.
	SpecificReservationRequired interface{}
	// The zone where the reservation is made.
	Zone interface{}
}
