// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type RouterNat struct {
	s *pulumi.ResourceState
}

// NewRouterNat registers a new resource with the given unique name, arguments, and options.
func NewRouterNat(ctx *pulumi.Context,
	name string, args *RouterNatArgs, opts ...pulumi.ResourceOpt) (*RouterNat, error) {
	if args == nil || args.NatIpAllocateOption == nil {
		return nil, errors.New("missing required argument 'NatIpAllocateOption'")
	}
	if args == nil || args.Router == nil {
		return nil, errors.New("missing required argument 'Router'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["icmpIdleTimeoutSec"] = nil
		inputs["minPortsPerVm"] = nil
		inputs["name"] = nil
		inputs["natIpAllocateOption"] = nil
		inputs["natIps"] = nil
		inputs["project"] = nil
		inputs["region"] = nil
		inputs["router"] = nil
		inputs["sourceSubnetworkIpRangesToNat"] = nil
		inputs["subnetworks"] = nil
		inputs["tcpEstablishedIdleTimeoutSec"] = nil
		inputs["tcpTransitoryIdleTimeoutSec"] = nil
		inputs["udpIdleTimeoutSec"] = nil
	} else {
		inputs["icmpIdleTimeoutSec"] = args.IcmpIdleTimeoutSec
		inputs["minPortsPerVm"] = args.MinPortsPerVm
		inputs["name"] = args.Name
		inputs["natIpAllocateOption"] = args.NatIpAllocateOption
		inputs["natIps"] = args.NatIps
		inputs["project"] = args.Project
		inputs["region"] = args.Region
		inputs["router"] = args.Router
		inputs["sourceSubnetworkIpRangesToNat"] = args.SourceSubnetworkIpRangesToNat
		inputs["subnetworks"] = args.Subnetworks
		inputs["tcpEstablishedIdleTimeoutSec"] = args.TcpEstablishedIdleTimeoutSec
		inputs["tcpTransitoryIdleTimeoutSec"] = args.TcpTransitoryIdleTimeoutSec
		inputs["udpIdleTimeoutSec"] = args.UdpIdleTimeoutSec
	}
	s, err := ctx.RegisterResource("gcp:compute/routerNat:RouterNat", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RouterNat{s: s}, nil
}

// GetRouterNat gets an existing RouterNat resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterNat(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RouterNatState, opts ...pulumi.ResourceOpt) (*RouterNat, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["icmpIdleTimeoutSec"] = state.IcmpIdleTimeoutSec
		inputs["minPortsPerVm"] = state.MinPortsPerVm
		inputs["name"] = state.Name
		inputs["natIpAllocateOption"] = state.NatIpAllocateOption
		inputs["natIps"] = state.NatIps
		inputs["project"] = state.Project
		inputs["region"] = state.Region
		inputs["router"] = state.Router
		inputs["sourceSubnetworkIpRangesToNat"] = state.SourceSubnetworkIpRangesToNat
		inputs["subnetworks"] = state.Subnetworks
		inputs["tcpEstablishedIdleTimeoutSec"] = state.TcpEstablishedIdleTimeoutSec
		inputs["tcpTransitoryIdleTimeoutSec"] = state.TcpTransitoryIdleTimeoutSec
		inputs["udpIdleTimeoutSec"] = state.UdpIdleTimeoutSec
	}
	s, err := ctx.ReadResource("gcp:compute/routerNat:RouterNat", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RouterNat{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RouterNat) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RouterNat) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *RouterNat) IcmpIdleTimeoutSec() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["icmpIdleTimeoutSec"])
}

func (r *RouterNat) MinPortsPerVm() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["minPortsPerVm"])
}

func (r *RouterNat) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *RouterNat) NatIpAllocateOption() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["natIpAllocateOption"])
}

func (r *RouterNat) NatIps() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["natIps"])
}

func (r *RouterNat) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

func (r *RouterNat) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

func (r *RouterNat) Router() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["router"])
}

func (r *RouterNat) SourceSubnetworkIpRangesToNat() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceSubnetworkIpRangesToNat"])
}

func (r *RouterNat) Subnetworks() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["subnetworks"])
}

func (r *RouterNat) TcpEstablishedIdleTimeoutSec() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["tcpEstablishedIdleTimeoutSec"])
}

func (r *RouterNat) TcpTransitoryIdleTimeoutSec() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["tcpTransitoryIdleTimeoutSec"])
}

func (r *RouterNat) UdpIdleTimeoutSec() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["udpIdleTimeoutSec"])
}

// Input properties used for looking up and filtering RouterNat resources.
type RouterNatState struct {
	IcmpIdleTimeoutSec interface{}
	MinPortsPerVm interface{}
	Name interface{}
	NatIpAllocateOption interface{}
	NatIps interface{}
	Project interface{}
	Region interface{}
	Router interface{}
	SourceSubnetworkIpRangesToNat interface{}
	Subnetworks interface{}
	TcpEstablishedIdleTimeoutSec interface{}
	TcpTransitoryIdleTimeoutSec interface{}
	UdpIdleTimeoutSec interface{}
}

// The set of arguments for constructing a RouterNat resource.
type RouterNatArgs struct {
	IcmpIdleTimeoutSec interface{}
	MinPortsPerVm interface{}
	Name interface{}
	NatIpAllocateOption interface{}
	NatIps interface{}
	Project interface{}
	Region interface{}
	Router interface{}
	SourceSubnetworkIpRangesToNat interface{}
	Subnetworks interface{}
	TcpEstablishedIdleTimeoutSec interface{}
	TcpTransitoryIdleTimeoutSec interface{}
	UdpIdleTimeoutSec interface{}
}
