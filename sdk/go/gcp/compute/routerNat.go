// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_router_nat.html.markdown.
type RouterNat struct {
	s *pulumi.ResourceState
}

// NewRouterNat registers a new resource with the given unique name, arguments, and options.
func NewRouterNat(ctx *pulumi.Context,
	name string, args *RouterNatArgs, opts ...pulumi.ResourceOpt) (*RouterNat, error) {
	if args == nil || args.NatIpAllocateOption == nil {
		return nil, errors.New("missing required argument 'NatIpAllocateOption'")
	}
	if args == nil || args.Router == nil {
		return nil, errors.New("missing required argument 'Router'")
	}
	if args == nil || args.SourceSubnetworkIpRangesToNat == nil {
		return nil, errors.New("missing required argument 'SourceSubnetworkIpRangesToNat'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["drainNatIps"] = nil
		inputs["icmpIdleTimeoutSec"] = nil
		inputs["logConfig"] = nil
		inputs["minPortsPerVm"] = nil
		inputs["name"] = nil
		inputs["natIpAllocateOption"] = nil
		inputs["natIps"] = nil
		inputs["project"] = nil
		inputs["region"] = nil
		inputs["router"] = nil
		inputs["sourceSubnetworkIpRangesToNat"] = nil
		inputs["subnetworks"] = nil
		inputs["tcpEstablishedIdleTimeoutSec"] = nil
		inputs["tcpTransitoryIdleTimeoutSec"] = nil
		inputs["udpIdleTimeoutSec"] = nil
	} else {
		inputs["drainNatIps"] = args.DrainNatIps
		inputs["icmpIdleTimeoutSec"] = args.IcmpIdleTimeoutSec
		inputs["logConfig"] = args.LogConfig
		inputs["minPortsPerVm"] = args.MinPortsPerVm
		inputs["name"] = args.Name
		inputs["natIpAllocateOption"] = args.NatIpAllocateOption
		inputs["natIps"] = args.NatIps
		inputs["project"] = args.Project
		inputs["region"] = args.Region
		inputs["router"] = args.Router
		inputs["sourceSubnetworkIpRangesToNat"] = args.SourceSubnetworkIpRangesToNat
		inputs["subnetworks"] = args.Subnetworks
		inputs["tcpEstablishedIdleTimeoutSec"] = args.TcpEstablishedIdleTimeoutSec
		inputs["tcpTransitoryIdleTimeoutSec"] = args.TcpTransitoryIdleTimeoutSec
		inputs["udpIdleTimeoutSec"] = args.UdpIdleTimeoutSec
	}
	s, err := ctx.RegisterResource("gcp:compute/routerNat:RouterNat", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RouterNat{s: s}, nil
}

// GetRouterNat gets an existing RouterNat resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterNat(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RouterNatState, opts ...pulumi.ResourceOpt) (*RouterNat, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["drainNatIps"] = state.DrainNatIps
		inputs["icmpIdleTimeoutSec"] = state.IcmpIdleTimeoutSec
		inputs["logConfig"] = state.LogConfig
		inputs["minPortsPerVm"] = state.MinPortsPerVm
		inputs["name"] = state.Name
		inputs["natIpAllocateOption"] = state.NatIpAllocateOption
		inputs["natIps"] = state.NatIps
		inputs["project"] = state.Project
		inputs["region"] = state.Region
		inputs["router"] = state.Router
		inputs["sourceSubnetworkIpRangesToNat"] = state.SourceSubnetworkIpRangesToNat
		inputs["subnetworks"] = state.Subnetworks
		inputs["tcpEstablishedIdleTimeoutSec"] = state.TcpEstablishedIdleTimeoutSec
		inputs["tcpTransitoryIdleTimeoutSec"] = state.TcpTransitoryIdleTimeoutSec
		inputs["udpIdleTimeoutSec"] = state.UdpIdleTimeoutSec
	}
	s, err := ctx.ReadResource("gcp:compute/routerNat:RouterNat", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RouterNat{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RouterNat) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RouterNat) ID() pulumi.IDOutput {
	return r.s.ID()
}

// A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to
// the NAT.
func (r *RouterNat) DrainNatIps() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["drainNatIps"])
}

// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
func (r *RouterNat) IcmpIdleTimeoutSec() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["icmpIdleTimeoutSec"])
}

// Configuration for logging on NAT
func (r *RouterNat) LogConfig() pulumi.Output {
	return r.s.State["logConfig"]
}

// Minimum number of ports allocated to a VM from this NAT.
func (r *RouterNat) MinPortsPerVm() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["minPortsPerVm"])
}

// Name of the NAT service. The name must be 1-63 characters long and comply with RFC1035.
func (r *RouterNat) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// How external IPs should be allocated for this NAT. Valid values are 'AUTO_ONLY' for only allowing NAT IPs allocated by
// Google Cloud Platform, or 'MANUAL_ONLY' for only user-allocated NAT IP addresses.
func (r *RouterNat) NatIpAllocateOption() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["natIpAllocateOption"])
}

// Self-links of NAT IPs. Only valid if natIpAllocateOption is set to MANUAL_ONLY.
func (r *RouterNat) NatIps() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["natIps"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *RouterNat) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// Region where the router and NAT reside.
func (r *RouterNat) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// The name of the Cloud Router in which this NAT will be configured.
func (r *RouterNat) Router() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["router"])
}

// How NAT should be configured per Subnetwork. If 'ALL_SUBNETWORKS_ALL_IP_RANGES', all of the IP ranges in every
// Subnetwork are allowed to Nat. If 'ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES', all of the primary IP ranges in every
// Subnetwork are allowed to Nat. 'LIST_OF_SUBNETWORKS': A list of Subnetworks are allowed to Nat (specified in the field
// subnetwork below). Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or
// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other RouterNat section in any Router for this
// network in this region.
func (r *RouterNat) SourceSubnetworkIpRangesToNat() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceSubnetworkIpRangesToNat"])
}

// One or more subnetwork NAT configurations. Only used if 'source_subnetwork_ip_ranges_to_nat' is set to
// 'LIST_OF_SUBNETWORKS'
func (r *RouterNat) Subnetworks() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["subnetworks"])
}

// Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
func (r *RouterNat) TcpEstablishedIdleTimeoutSec() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tcpEstablishedIdleTimeoutSec"])
}

// Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
func (r *RouterNat) TcpTransitoryIdleTimeoutSec() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["tcpTransitoryIdleTimeoutSec"])
}

// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
func (r *RouterNat) UdpIdleTimeoutSec() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["udpIdleTimeoutSec"])
}

// Input properties used for looking up and filtering RouterNat resources.
type RouterNatState struct {
	// A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned
	// to the NAT.
	DrainNatIps interface{}
	// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
	IcmpIdleTimeoutSec interface{}
	// Configuration for logging on NAT
	LogConfig interface{}
	// Minimum number of ports allocated to a VM from this NAT.
	MinPortsPerVm interface{}
	// Name of the NAT service. The name must be 1-63 characters long and comply with RFC1035.
	Name interface{}
	// How external IPs should be allocated for this NAT. Valid values are 'AUTO_ONLY' for only allowing NAT IPs allocated by
	// Google Cloud Platform, or 'MANUAL_ONLY' for only user-allocated NAT IP addresses.
	NatIpAllocateOption interface{}
	// Self-links of NAT IPs. Only valid if natIpAllocateOption is set to MANUAL_ONLY.
	NatIps interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// Region where the router and NAT reside.
	Region interface{}
	// The name of the Cloud Router in which this NAT will be configured.
	Router interface{}
	// How NAT should be configured per Subnetwork. If 'ALL_SUBNETWORKS_ALL_IP_RANGES', all of the IP ranges in every
	// Subnetwork are allowed to Nat. If 'ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES', all of the primary IP ranges in every
	// Subnetwork are allowed to Nat. 'LIST_OF_SUBNETWORKS': A list of Subnetworks are allowed to Nat (specified in the field
	// subnetwork below). Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or
	// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other RouterNat section in any Router for this
	// network in this region.
	SourceSubnetworkIpRangesToNat interface{}
	// One or more subnetwork NAT configurations. Only used if 'source_subnetwork_ip_ranges_to_nat' is set to
	// 'LIST_OF_SUBNETWORKS'
	Subnetworks interface{}
	// Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
	TcpEstablishedIdleTimeoutSec interface{}
	// Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
	TcpTransitoryIdleTimeoutSec interface{}
	// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
	UdpIdleTimeoutSec interface{}
}

// The set of arguments for constructing a RouterNat resource.
type RouterNatArgs struct {
	// A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned
	// to the NAT.
	DrainNatIps interface{}
	// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
	IcmpIdleTimeoutSec interface{}
	// Configuration for logging on NAT
	LogConfig interface{}
	// Minimum number of ports allocated to a VM from this NAT.
	MinPortsPerVm interface{}
	// Name of the NAT service. The name must be 1-63 characters long and comply with RFC1035.
	Name interface{}
	// How external IPs should be allocated for this NAT. Valid values are 'AUTO_ONLY' for only allowing NAT IPs allocated by
	// Google Cloud Platform, or 'MANUAL_ONLY' for only user-allocated NAT IP addresses.
	NatIpAllocateOption interface{}
	// Self-links of NAT IPs. Only valid if natIpAllocateOption is set to MANUAL_ONLY.
	NatIps interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// Region where the router and NAT reside.
	Region interface{}
	// The name of the Cloud Router in which this NAT will be configured.
	Router interface{}
	// How NAT should be configured per Subnetwork. If 'ALL_SUBNETWORKS_ALL_IP_RANGES', all of the IP ranges in every
	// Subnetwork are allowed to Nat. If 'ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES', all of the primary IP ranges in every
	// Subnetwork are allowed to Nat. 'LIST_OF_SUBNETWORKS': A list of Subnetworks are allowed to Nat (specified in the field
	// subnetwork below). Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or
	// ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other RouterNat section in any Router for this
	// network in this region.
	SourceSubnetworkIpRangesToNat interface{}
	// One or more subnetwork NAT configurations. Only used if 'source_subnetwork_ip_ranges_to_nat' is set to
	// 'LIST_OF_SUBNETWORKS'
	Subnetworks interface{}
	// Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
	TcpEstablishedIdleTimeoutSec interface{}
	// Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
	TcpTransitoryIdleTimeoutSec interface{}
	// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
	UdpIdleTimeoutSec interface{}
}
