// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iap

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/iap_web_type_compute_iam_member.html.markdown.
type WebTypeComputeIamMember struct {
	s *pulumi.ResourceState
}

// NewWebTypeComputeIamMember registers a new resource with the given unique name, arguments, and options.
func NewWebTypeComputeIamMember(ctx *pulumi.Context,
	name string, args *WebTypeComputeIamMemberArgs, opts ...pulumi.ResourceOpt) (*WebTypeComputeIamMember, error) {
	if args == nil || args.Member == nil {
		return nil, errors.New("missing required argument 'Member'")
	}
	if args == nil || args.Role == nil {
		return nil, errors.New("missing required argument 'Role'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["condition"] = nil
		inputs["member"] = nil
		inputs["project"] = nil
		inputs["role"] = nil
	} else {
		inputs["condition"] = args.Condition
		inputs["member"] = args.Member
		inputs["project"] = args.Project
		inputs["role"] = args.Role
	}
	inputs["etag"] = nil
	s, err := ctx.RegisterResource("gcp:iap/webTypeComputeIamMember:WebTypeComputeIamMember", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &WebTypeComputeIamMember{s: s}, nil
}

// GetWebTypeComputeIamMember gets an existing WebTypeComputeIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebTypeComputeIamMember(ctx *pulumi.Context,
	name string, id pulumi.ID, state *WebTypeComputeIamMemberState, opts ...pulumi.ResourceOpt) (*WebTypeComputeIamMember, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["condition"] = state.Condition
		inputs["etag"] = state.Etag
		inputs["member"] = state.Member
		inputs["project"] = state.Project
		inputs["role"] = state.Role
	}
	s, err := ctx.ReadResource("gcp:iap/webTypeComputeIamMember:WebTypeComputeIamMember", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &WebTypeComputeIamMember{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *WebTypeComputeIamMember) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *WebTypeComputeIamMember) ID() pulumi.IDOutput {
	return r.s.ID()
}

func (r *WebTypeComputeIamMember) Condition() pulumi.Output {
	return r.s.State["condition"]
}

// (Computed) The etag of the IAM policy.
func (r *WebTypeComputeIamMember) Etag() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["etag"])
}

func (r *WebTypeComputeIamMember) Member() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["member"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (r *WebTypeComputeIamMember) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// The role that should be applied. Only one
// `iap.WebTypeComputeIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (r *WebTypeComputeIamMember) Role() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["role"])
}

// Input properties used for looking up and filtering WebTypeComputeIamMember resources.
type WebTypeComputeIamMemberState struct {
	Condition interface{}
	// (Computed) The etag of the IAM policy.
	Etag interface{}
	Member interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project interface{}
	// The role that should be applied. Only one
	// `iap.WebTypeComputeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role interface{}
}

// The set of arguments for constructing a WebTypeComputeIamMember resource.
type WebTypeComputeIamMemberArgs struct {
	Condition interface{}
	Member interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project interface{}
	// The role that should be applied. Only one
	// `iap.WebTypeComputeIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role interface{}
}
