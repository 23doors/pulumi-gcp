// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iap

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/iap_app_engine_service_iam_member.html.markdown.
type AppEngineServiceIamMember struct {
	s *pulumi.ResourceState
}

// NewAppEngineServiceIamMember registers a new resource with the given unique name, arguments, and options.
func NewAppEngineServiceIamMember(ctx *pulumi.Context,
	name string, args *AppEngineServiceIamMemberArgs, opts ...pulumi.ResourceOpt) (*AppEngineServiceIamMember, error) {
	if args == nil || args.AppId == nil {
		return nil, errors.New("missing required argument 'AppId'")
	}
	if args == nil || args.Member == nil {
		return nil, errors.New("missing required argument 'Member'")
	}
	if args == nil || args.Role == nil {
		return nil, errors.New("missing required argument 'Role'")
	}
	if args == nil || args.Service == nil {
		return nil, errors.New("missing required argument 'Service'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["appId"] = nil
		inputs["condition"] = nil
		inputs["member"] = nil
		inputs["project"] = nil
		inputs["role"] = nil
		inputs["service"] = nil
	} else {
		inputs["appId"] = args.AppId
		inputs["condition"] = args.Condition
		inputs["member"] = args.Member
		inputs["project"] = args.Project
		inputs["role"] = args.Role
		inputs["service"] = args.Service
	}
	inputs["etag"] = nil
	s, err := ctx.RegisterResource("gcp:iap/appEngineServiceIamMember:AppEngineServiceIamMember", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AppEngineServiceIamMember{s: s}, nil
}

// GetAppEngineServiceIamMember gets an existing AppEngineServiceIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppEngineServiceIamMember(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AppEngineServiceIamMemberState, opts ...pulumi.ResourceOpt) (*AppEngineServiceIamMember, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["appId"] = state.AppId
		inputs["condition"] = state.Condition
		inputs["etag"] = state.Etag
		inputs["member"] = state.Member
		inputs["project"] = state.Project
		inputs["role"] = state.Role
		inputs["service"] = state.Service
	}
	s, err := ctx.ReadResource("gcp:iap/appEngineServiceIamMember:AppEngineServiceIamMember", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AppEngineServiceIamMember{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AppEngineServiceIamMember) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AppEngineServiceIamMember) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Id of the App Engine application. Used to find the parent resource to bind the IAM policy to
func (r *AppEngineServiceIamMember) AppId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["appId"])
}

func (r *AppEngineServiceIamMember) Condition() *pulumi.Output {
	return r.s.State["condition"]
}

// (Computed) The etag of the IAM policy.
func (r *AppEngineServiceIamMember) Etag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["etag"])
}

func (r *AppEngineServiceIamMember) Member() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["member"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
func (r *AppEngineServiceIamMember) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The role that should be applied. Only one
// `iap.AppEngineServiceIamBinding` can be used per role. Note that custom roles must be of the format
// `[projects|organizations]/{parent-name}/roles/{role-name}`.
func (r *AppEngineServiceIamMember) Role() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["role"])
}

// Service id of the App Engine application Used to find the parent resource to bind the IAM policy to
func (r *AppEngineServiceIamMember) Service() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["service"])
}

// Input properties used for looking up and filtering AppEngineServiceIamMember resources.
type AppEngineServiceIamMemberState struct {
	// Id of the App Engine application. Used to find the parent resource to bind the IAM policy to
	AppId interface{}
	Condition interface{}
	// (Computed) The etag of the IAM policy.
	Etag interface{}
	Member interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project interface{}
	// The role that should be applied. Only one
	// `iap.AppEngineServiceIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role interface{}
	// Service id of the App Engine application Used to find the parent resource to bind the IAM policy to
	Service interface{}
}

// The set of arguments for constructing a AppEngineServiceIamMember resource.
type AppEngineServiceIamMemberArgs struct {
	// Id of the App Engine application. Used to find the parent resource to bind the IAM policy to
	AppId interface{}
	Condition interface{}
	Member interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	Project interface{}
	// The role that should be applied. Only one
	// `iap.AppEngineServiceIamBinding` can be used per role. Note that custom roles must be of the format
	// `[projects|organizations]/{parent-name}/roles/{role-name}`.
	Role interface{}
	// Service id of the App Engine application Used to find the parent resource to bind the IAM policy to
	Service interface{}
}
