// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package billing

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/billing_budget.html.markdown.
type Budget struct {
	s *pulumi.ResourceState
}

// NewBudget registers a new resource with the given unique name, arguments, and options.
func NewBudget(ctx *pulumi.Context,
	name string, args *BudgetArgs, opts ...pulumi.ResourceOpt) (*Budget, error) {
	if args == nil || args.Amount == nil {
		return nil, errors.New("missing required argument 'Amount'")
	}
	if args == nil || args.BillingAccount == nil {
		return nil, errors.New("missing required argument 'BillingAccount'")
	}
	if args == nil || args.ThresholdRules == nil {
		return nil, errors.New("missing required argument 'ThresholdRules'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allUpdatesRule"] = nil
		inputs["amount"] = nil
		inputs["billingAccount"] = nil
		inputs["budgetFilter"] = nil
		inputs["displayName"] = nil
		inputs["thresholdRules"] = nil
	} else {
		inputs["allUpdatesRule"] = args.AllUpdatesRule
		inputs["amount"] = args.Amount
		inputs["billingAccount"] = args.BillingAccount
		inputs["budgetFilter"] = args.BudgetFilter
		inputs["displayName"] = args.DisplayName
		inputs["thresholdRules"] = args.ThresholdRules
	}
	inputs["name"] = nil
	s, err := ctx.RegisterResource("gcp:billing/budget:Budget", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Budget{s: s}, nil
}

// GetBudget gets an existing Budget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBudget(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BudgetState, opts ...pulumi.ResourceOpt) (*Budget, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allUpdatesRule"] = state.AllUpdatesRule
		inputs["amount"] = state.Amount
		inputs["billingAccount"] = state.BillingAccount
		inputs["budgetFilter"] = state.BudgetFilter
		inputs["displayName"] = state.DisplayName
		inputs["name"] = state.Name
		inputs["thresholdRules"] = state.ThresholdRules
	}
	s, err := ctx.ReadResource("gcp:billing/budget:Budget", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Budget{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Budget) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Budget) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Defines notifications that are sent on every update to the billing account's spend, regardless of the thresholds defined
// using threshold rules.
func (r *Budget) AllUpdatesRule() pulumi.Output {
	return r.s.State["allUpdatesRule"]
}

// The budgeted amount for each usage period.
func (r *Budget) Amount() pulumi.Output {
	return r.s.State["amount"]
}

// ID of the billing account to set a budget on.
func (r *Budget) BillingAccount() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["billingAccount"])
}

// Filters that define which resources are used to compute the actual spend against the budget.
func (r *Budget) BudgetFilter() pulumi.Output {
	return r.s.State["budgetFilter"]
}

// User data for display name in UI. Must be <= 60 chars.
func (r *Budget) DisplayName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["displayName"])
}

// Resource name of the budget. The resource name implies the scope of a budget. Values are of the form
// billingAccounts/{billingAccountId}/budgets/{budgetId}.
func (r *Budget) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Rules that trigger alerts (notifications of thresholds being crossed) when spend exceeds the specified percentages of
// the budget.
func (r *Budget) ThresholdRules() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["thresholdRules"])
}

// Input properties used for looking up and filtering Budget resources.
type BudgetState struct {
	// Defines notifications that are sent on every update to the billing account's spend, regardless of the thresholds
	// defined using threshold rules.
	AllUpdatesRule interface{}
	// The budgeted amount for each usage period.
	Amount interface{}
	// ID of the billing account to set a budget on.
	BillingAccount interface{}
	// Filters that define which resources are used to compute the actual spend against the budget.
	BudgetFilter interface{}
	// User data for display name in UI. Must be <= 60 chars.
	DisplayName interface{}
	// Resource name of the budget. The resource name implies the scope of a budget. Values are of the form
	// billingAccounts/{billingAccountId}/budgets/{budgetId}.
	Name interface{}
	// Rules that trigger alerts (notifications of thresholds being crossed) when spend exceeds the specified percentages of
	// the budget.
	ThresholdRules interface{}
}

// The set of arguments for constructing a Budget resource.
type BudgetArgs struct {
	// Defines notifications that are sent on every update to the billing account's spend, regardless of the thresholds
	// defined using threshold rules.
	AllUpdatesRule interface{}
	// The budgeted amount for each usage period.
	Amount interface{}
	// ID of the billing account to set a budget on.
	BillingAccount interface{}
	// Filters that define which resources are used to compute the actual spend against the budget.
	BudgetFilter interface{}
	// User data for display name in UI. Must be <= 60 chars.
	DisplayName interface{}
	// Rules that trigger alerts (notifications of thresholds being crossed) when spend exceeds the specified percentages of
	// the budget.
	ThresholdRules interface{}
}
