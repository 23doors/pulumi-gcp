// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package spanner

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/spanner_database.html.markdown.
type Database struct {
	s *pulumi.ResourceState
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOpt) (*Database, error) {
	if args == nil || args.Instance == nil {
		return nil, errors.New("missing required argument 'Instance'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["ddls"] = nil
		inputs["instance"] = nil
		inputs["name"] = nil
		inputs["project"] = nil
	} else {
		inputs["ddls"] = args.Ddls
		inputs["instance"] = args.Instance
		inputs["name"] = args.Name
		inputs["project"] = args.Project
	}
	inputs["state"] = nil
	s, err := ctx.RegisterResource("gcp:spanner/database:Database", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Database{s: s}, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DatabaseState, opts ...pulumi.ResourceOpt) (*Database, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["ddls"] = state.Ddls
		inputs["instance"] = state.Instance
		inputs["name"] = state.Name
		inputs["project"] = state.Project
		inputs["state"] = state.State
	}
	s, err := ctx.ReadResource("gcp:spanner/database:Database", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Database{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Database) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Database) ID() pulumi.IDOutput {
	return r.s.ID()
}

// An optional list of DDL statements to run inside the newly created database. Statements can create tables, indexes, etc.
// These statements execute atomically with the creation of the database: if there is an error in any statement, the
// database is not created.
func (r *Database) Ddls() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["ddls"])
}

// The instance to create the database on.
func (r *Database) Instance() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["instance"])
}

// A unique identifier for the database, which cannot be changed after the instance is created. Values are of the form
// [a-z][-a-z0-9]*[a-z0-9].
func (r *Database) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Database) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// An explanation of the status of the database.
func (r *Database) State() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["state"])
}

// Input properties used for looking up and filtering Database resources.
type DatabaseState struct {
	// An optional list of DDL statements to run inside the newly created database. Statements can create tables, indexes,
	// etc. These statements execute atomically with the creation of the database: if there is an error in any statement, the
	// database is not created.
	Ddls interface{}
	// The instance to create the database on.
	Instance interface{}
	// A unique identifier for the database, which cannot be changed after the instance is created. Values are of the form
	// [a-z][-a-z0-9]*[a-z0-9].
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// An explanation of the status of the database.
	State interface{}
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	// An optional list of DDL statements to run inside the newly created database. Statements can create tables, indexes,
	// etc. These statements execute atomically with the creation of the database: if there is an error in any statement, the
	// database is not created.
	Ddls interface{}
	// The instance to create the database on.
	Instance interface{}
	// A unique identifier for the database, which cannot be changed after the instance is created. Values are of the form
	// [a-z][-a-z0-9]*[a-z0-9].
	Name interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
}
