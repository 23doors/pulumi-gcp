// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datafusion

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/data_fusion_instance.html.markdown.
type Instance struct {
	s *pulumi.ResourceState
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOpt) (*Instance, error) {
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["enableStackdriverLogging"] = nil
		inputs["enableStackdriverMonitoring"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["options"] = nil
		inputs["project"] = nil
		inputs["region"] = nil
		inputs["type"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["enableStackdriverLogging"] = args.EnableStackdriverLogging
		inputs["enableStackdriverMonitoring"] = args.EnableStackdriverMonitoring
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["options"] = args.Options
		inputs["project"] = args.Project
		inputs["region"] = args.Region
		inputs["type"] = args.Type
	}
	inputs["createTime"] = nil
	inputs["serviceEndpoint"] = nil
	inputs["state"] = nil
	inputs["stateMessage"] = nil
	inputs["updateTime"] = nil
	inputs["version"] = nil
	s, err := ctx.RegisterResource("gcp:datafusion/instance:Instance", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Instance{s: s}, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.ID, state *InstanceState, opts ...pulumi.ResourceOpt) (*Instance, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["createTime"] = state.CreateTime
		inputs["description"] = state.Description
		inputs["enableStackdriverLogging"] = state.EnableStackdriverLogging
		inputs["enableStackdriverMonitoring"] = state.EnableStackdriverMonitoring
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["options"] = state.Options
		inputs["project"] = state.Project
		inputs["region"] = state.Region
		inputs["serviceEndpoint"] = state.ServiceEndpoint
		inputs["state"] = state.State
		inputs["stateMessage"] = state.StateMessage
		inputs["type"] = state.Type
		inputs["updateTime"] = state.UpdateTime
		inputs["version"] = state.Version
	}
	s, err := ctx.ReadResource("gcp:datafusion/instance:Instance", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Instance{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Instance) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Instance) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The time the instance was created in RFC3339 UTC "Zulu" format, accurate to nanoseconds.
func (r *Instance) CreateTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createTime"])
}

// An optional description of the instance.
func (r *Instance) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Option to enable Stackdriver Logging.
func (r *Instance) EnableStackdriverLogging() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableStackdriverLogging"])
}

// Option to enable Stackdriver Monitoring.
func (r *Instance) EnableStackdriverMonitoring() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableStackdriverMonitoring"])
}

// The resource labels for instance to use to annotate any related underlying resources, such as Compute Engine VMs.
func (r *Instance) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

// The ID of the instance or a fully qualified identifier for the instance.
func (r *Instance) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Map of additional options used to configure the behavior of Data Fusion instance.
func (r *Instance) Options() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["options"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *Instance) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The region of the Data Fusion instance.
func (r *Instance) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// Endpoint on which the Data Fusion UI and REST APIs are accessible.
func (r *Instance) ServiceEndpoint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serviceEndpoint"])
}

// The current state of this Data Fusion instance. - CREATING: Instance is being created - RUNNING: Instance is running and
// ready for requests - FAILED: Instance creation failed - DELETING: Instance is being deleted - UPGRADING: Instance is
// being upgraded - RESTARTING: Instance is being restarted
func (r *Instance) State() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["state"])
}

// Additional information about the current state of this Data Fusion instance if available.
func (r *Instance) StateMessage() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["stateMessage"])
}

// Represents the type of Data Fusion instance. Each type is configured with the default settings for processing and
// memory. - BASIC: Basic Data Fusion instance. In Basic type, the user will be able to create data pipelines using point
// and click UI. However, there are certain limitations, such as fewer number of concurrent pipelines, no support for
// streaming pipelines, etc. - ENTERPRISE: Enterprise Data Fusion instance. In Enterprise type, the user will have more
// features available, such as support for streaming pipelines, higher number of concurrent pipelines, etc.
func (r *Instance) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// The time the instance was last updated in RFC3339 UTC "Zulu" format, accurate to nanoseconds.
func (r *Instance) UpdateTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["updateTime"])
}

// Current version of the Data Fusion.
func (r *Instance) Version() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["version"])
}

// Input properties used for looking up and filtering Instance resources.
type InstanceState struct {
	// The time the instance was created in RFC3339 UTC "Zulu" format, accurate to nanoseconds.
	CreateTime interface{}
	// An optional description of the instance.
	Description interface{}
	// Option to enable Stackdriver Logging.
	EnableStackdriverLogging interface{}
	// Option to enable Stackdriver Monitoring.
	EnableStackdriverMonitoring interface{}
	// The resource labels for instance to use to annotate any related underlying resources, such as Compute Engine VMs.
	Labels interface{}
	// The ID of the instance or a fully qualified identifier for the instance.
	Name interface{}
	// Map of additional options used to configure the behavior of Data Fusion instance.
	Options interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The region of the Data Fusion instance.
	Region interface{}
	// Endpoint on which the Data Fusion UI and REST APIs are accessible.
	ServiceEndpoint interface{}
	// The current state of this Data Fusion instance. - CREATING: Instance is being created - RUNNING: Instance is running
	// and ready for requests - FAILED: Instance creation failed - DELETING: Instance is being deleted - UPGRADING: Instance
	// is being upgraded - RESTARTING: Instance is being restarted
	State interface{}
	// Additional information about the current state of this Data Fusion instance if available.
	StateMessage interface{}
	// Represents the type of Data Fusion instance. Each type is configured with the default settings for processing and
	// memory. - BASIC: Basic Data Fusion instance. In Basic type, the user will be able to create data pipelines using point
	// and click UI. However, there are certain limitations, such as fewer number of concurrent pipelines, no support for
	// streaming pipelines, etc. - ENTERPRISE: Enterprise Data Fusion instance. In Enterprise type, the user will have more
	// features available, such as support for streaming pipelines, higher number of concurrent pipelines, etc.
	Type interface{}
	// The time the instance was last updated in RFC3339 UTC "Zulu" format, accurate to nanoseconds.
	UpdateTime interface{}
	// Current version of the Data Fusion.
	Version interface{}
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// An optional description of the instance.
	Description interface{}
	// Option to enable Stackdriver Logging.
	EnableStackdriverLogging interface{}
	// Option to enable Stackdriver Monitoring.
	EnableStackdriverMonitoring interface{}
	// The resource labels for instance to use to annotate any related underlying resources, such as Compute Engine VMs.
	Labels interface{}
	// The ID of the instance or a fully qualified identifier for the instance.
	Name interface{}
	// Map of additional options used to configure the behavior of Data Fusion instance.
	Options interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The region of the Data Fusion instance.
	Region interface{}
	// Represents the type of Data Fusion instance. Each type is configured with the default settings for processing and
	// memory. - BASIC: Basic Data Fusion instance. In Basic type, the user will be able to create data pipelines using point
	// and click UI. However, there are certain limitations, such as fewer number of concurrent pipelines, no support for
	// streaming pipelines, etc. - ENTERPRISE: Enterprise Data Fusion instance. In Enterprise type, the user will have more
	// features available, such as support for streaming pipelines, higher number of concurrent pipelines, etc.
	Type interface{}
}
