// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ml

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/ml_engine_model.html.markdown.
type EngineModel struct {
	s *pulumi.ResourceState
}

// NewEngineModel registers a new resource with the given unique name, arguments, and options.
func NewEngineModel(ctx *pulumi.Context,
	name string, args *EngineModelArgs, opts ...pulumi.ResourceOpt) (*EngineModel, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["defaultVersion"] = nil
		inputs["description"] = nil
		inputs["labels"] = nil
		inputs["name"] = nil
		inputs["onlinePredictionConsoleLogging"] = nil
		inputs["onlinePredictionLogging"] = nil
		inputs["project"] = nil
		inputs["regions"] = nil
	} else {
		inputs["defaultVersion"] = args.DefaultVersion
		inputs["description"] = args.Description
		inputs["labels"] = args.Labels
		inputs["name"] = args.Name
		inputs["onlinePredictionConsoleLogging"] = args.OnlinePredictionConsoleLogging
		inputs["onlinePredictionLogging"] = args.OnlinePredictionLogging
		inputs["project"] = args.Project
		inputs["regions"] = args.Regions
	}
	s, err := ctx.RegisterResource("gcp:ml/engineModel:EngineModel", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EngineModel{s: s}, nil
}

// GetEngineModel gets an existing EngineModel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEngineModel(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EngineModelState, opts ...pulumi.ResourceOpt) (*EngineModel, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["defaultVersion"] = state.DefaultVersion
		inputs["description"] = state.Description
		inputs["labels"] = state.Labels
		inputs["name"] = state.Name
		inputs["onlinePredictionConsoleLogging"] = state.OnlinePredictionConsoleLogging
		inputs["onlinePredictionLogging"] = state.OnlinePredictionLogging
		inputs["project"] = state.Project
		inputs["regions"] = state.Regions
	}
	s, err := ctx.ReadResource("gcp:ml/engineModel:EngineModel", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EngineModel{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *EngineModel) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *EngineModel) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The default version of the model. This version will be used to handle prediction requests that do not specify a version.
func (r *EngineModel) DefaultVersion() *pulumi.Output {
	return r.s.State["defaultVersion"]
}

// The description specified for the model when it was created.
func (r *EngineModel) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// One or more labels that you can add, to organize your models.
func (r *EngineModel) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

// The name specified for the model.
func (r *EngineModel) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// If true, online prediction nodes send stderr and stdout streams to Stackdriver Logging
func (r *EngineModel) OnlinePredictionConsoleLogging() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["onlinePredictionConsoleLogging"])
}

// If true, online prediction access logs are sent to StackDriver Logging.
func (r *EngineModel) OnlinePredictionLogging() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["onlinePredictionLogging"])
}

// The ID of the project in which the resource belongs.
// If it is not provided, the provider project is used.
func (r *EngineModel) Project() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["project"])
}

// The list of regions where the model is going to be deployed. Currently only one region per model is supported
func (r *EngineModel) Regions() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["regions"])
}

// Input properties used for looking up and filtering EngineModel resources.
type EngineModelState struct {
	// The default version of the model. This version will be used to handle prediction requests that do not specify a
	// version.
	DefaultVersion interface{}
	// The description specified for the model when it was created.
	Description interface{}
	// One or more labels that you can add, to organize your models.
	Labels interface{}
	// The name specified for the model.
	Name interface{}
	// If true, online prediction nodes send stderr and stdout streams to Stackdriver Logging
	OnlinePredictionConsoleLogging interface{}
	// If true, online prediction access logs are sent to StackDriver Logging.
	OnlinePredictionLogging interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The list of regions where the model is going to be deployed. Currently only one region per model is supported
	Regions interface{}
}

// The set of arguments for constructing a EngineModel resource.
type EngineModelArgs struct {
	// The default version of the model. This version will be used to handle prediction requests that do not specify a
	// version.
	DefaultVersion interface{}
	// The description specified for the model when it was created.
	Description interface{}
	// One or more labels that you can add, to organize your models.
	Labels interface{}
	// The name specified for the model.
	Name interface{}
	// If true, online prediction nodes send stderr and stdout streams to Stackdriver Logging
	OnlinePredictionConsoleLogging interface{}
	// If true, online prediction access logs are sent to StackDriver Logging.
	OnlinePredictionLogging interface{}
	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	Project interface{}
	// The list of regions where the model is going to be deployed. Currently only one region per model is supported
	Regions interface{}
}
