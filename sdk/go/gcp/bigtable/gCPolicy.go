// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package bigtable

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a Google Cloud Bigtable GC Policy inside a family. For more information see
// [the official documentation](https://cloud.google.com/bigtable/) and
// [API](https://cloud.google.com/bigtable/docs/go/reference).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/bigtable_gc_policy.html.markdown.
type GCPolicy struct {
	s *pulumi.ResourceState
}

// NewGCPolicy registers a new resource with the given unique name, arguments, and options.
func NewGCPolicy(ctx *pulumi.Context,
	name string, args *GCPolicyArgs, opts ...pulumi.ResourceOpt) (*GCPolicy, error) {
	if args == nil || args.ColumnFamily == nil {
		return nil, errors.New("missing required argument 'ColumnFamily'")
	}
	if args == nil || args.InstanceName == nil {
		return nil, errors.New("missing required argument 'InstanceName'")
	}
	if args == nil || args.Table == nil {
		return nil, errors.New("missing required argument 'Table'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["columnFamily"] = nil
		inputs["instanceName"] = nil
		inputs["maxAges"] = nil
		inputs["maxVersions"] = nil
		inputs["mode"] = nil
		inputs["project"] = nil
		inputs["table"] = nil
	} else {
		inputs["columnFamily"] = args.ColumnFamily
		inputs["instanceName"] = args.InstanceName
		inputs["maxAges"] = args.MaxAges
		inputs["maxVersions"] = args.MaxVersions
		inputs["mode"] = args.Mode
		inputs["project"] = args.Project
		inputs["table"] = args.Table
	}
	s, err := ctx.RegisterResource("gcp:bigtable/gCPolicy:GCPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GCPolicy{s: s}, nil
}

// GetGCPolicy gets an existing GCPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGCPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GCPolicyState, opts ...pulumi.ResourceOpt) (*GCPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["columnFamily"] = state.ColumnFamily
		inputs["instanceName"] = state.InstanceName
		inputs["maxAges"] = state.MaxAges
		inputs["maxVersions"] = state.MaxVersions
		inputs["mode"] = state.Mode
		inputs["project"] = state.Project
		inputs["table"] = state.Table
	}
	s, err := ctx.ReadResource("gcp:bigtable/gCPolicy:GCPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GCPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *GCPolicy) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *GCPolicy) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The name of the column family.
func (r *GCPolicy) ColumnFamily() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["columnFamily"])
}

// The name of the Bigtable instance.
func (r *GCPolicy) InstanceName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["instanceName"])
}

// GC policy that applies to all cells older than the given age.
func (r *GCPolicy) MaxAges() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["maxAges"])
}

// GC policy that applies to all versions of a cell except for the most recent.
func (r *GCPolicy) MaxVersions() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["maxVersions"])
}

// If multiple policies are set, you should choose between `UNION` OR `INTERSECTION`.
func (r *GCPolicy) Mode() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["mode"])
}

// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
func (r *GCPolicy) Project() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["project"])
}

// The name of the table.
func (r *GCPolicy) Table() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["table"])
}

// Input properties used for looking up and filtering GCPolicy resources.
type GCPolicyState struct {
	// The name of the column family.
	ColumnFamily interface{}
	// The name of the Bigtable instance.
	InstanceName interface{}
	// GC policy that applies to all cells older than the given age.
	MaxAges interface{}
	// GC policy that applies to all versions of a cell except for the most recent.
	MaxVersions interface{}
	// If multiple policies are set, you should choose between `UNION` OR `INTERSECTION`.
	Mode interface{}
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project interface{}
	// The name of the table.
	Table interface{}
}

// The set of arguments for constructing a GCPolicy resource.
type GCPolicyArgs struct {
	// The name of the column family.
	ColumnFamily interface{}
	// The name of the Bigtable instance.
	InstanceName interface{}
	// GC policy that applies to all cells older than the given age.
	MaxAges interface{}
	// GC policy that applies to all versions of a cell except for the most recent.
	MaxVersions interface{}
	// If multiple policies are set, you should choose between `UNION` OR `INTERSECTION`.
	Mode interface{}
	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	Project interface{}
	// The name of the table.
	Table interface{}
}
