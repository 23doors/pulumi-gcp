// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class TransferJob extends pulumi.CustomResource {
    /**
     * Get an existing TransferJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransferJobState, opts?: pulumi.CustomResourceOptions): TransferJob {
        return new TransferJob(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly creationTime: pulumi.Output<string>;
    public /*out*/ readonly deletionTime: pulumi.Output<string>;
    public readonly description: pulumi.Output<string>;
    public /*out*/ readonly lastModificationTime: pulumi.Output<string>;
    public /*out*/ readonly name: pulumi.Output<string>;
    public readonly project: pulumi.Output<string>;
    public readonly schedule: pulumi.Output<{ scheduleEndDate?: { day: number, month: number, year: number }, scheduleStartDate: { day: number, month: number, year: number }, startTimeOfDay?: { hours: number, minutes: number, nanos: number, seconds: number } }>;
    public readonly status: pulumi.Output<string | undefined>;
    public readonly transferSpec: pulumi.Output<{ awsS3DataSource?: { awsAccessKey: { accessKeyId: string, secretAccessKey: string }, bucketName: string }, gcsDataSink?: { bucketName: string }, gcsDataSource?: { bucketName: string }, httpDataSource?: { listUrl: string }, objectConditions?: { excludePrefixes?: string[], includePrefixes?: string[], maxTimeElapsedSinceLastModification?: string, minTimeElapsedSinceLastModification?: string }, transferOptions?: { deleteObjectsFromSourceAfterTransfer?: boolean, deleteObjectsUniqueInSink?: boolean, overwriteObjectsAlreadyExistingInSink?: boolean } }>;

    /**
     * Create a TransferJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransferJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransferJobArgs | TransferJobState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: TransferJobState = argsOrState as TransferJobState | undefined;
            inputs["creationTime"] = state ? state.creationTime : undefined;
            inputs["deletionTime"] = state ? state.deletionTime : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["lastModificationTime"] = state ? state.lastModificationTime : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["schedule"] = state ? state.schedule : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["transferSpec"] = state ? state.transferSpec : undefined;
        } else {
            const args = argsOrState as TransferJobArgs | undefined;
            if (!args || args.description === undefined) {
                throw new Error("Missing required property 'description'");
            }
            if (!args || args.schedule === undefined) {
                throw new Error("Missing required property 'schedule'");
            }
            if (!args || args.transferSpec === undefined) {
                throw new Error("Missing required property 'transferSpec'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["schedule"] = args ? args.schedule : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["transferSpec"] = args ? args.transferSpec : undefined;
            inputs["creationTime"] = undefined /*out*/;
            inputs["deletionTime"] = undefined /*out*/;
            inputs["lastModificationTime"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
        }
        super("gcp:storage/transferJob:TransferJob", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TransferJob resources.
 */
export interface TransferJobState {
    readonly creationTime?: pulumi.Input<string>;
    readonly deletionTime?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly lastModificationTime?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly project?: pulumi.Input<string>;
    readonly schedule?: pulumi.Input<{ scheduleEndDate?: pulumi.Input<{ day: pulumi.Input<number>, month: pulumi.Input<number>, year: pulumi.Input<number> }>, scheduleStartDate: pulumi.Input<{ day: pulumi.Input<number>, month: pulumi.Input<number>, year: pulumi.Input<number> }>, startTimeOfDay?: pulumi.Input<{ hours: pulumi.Input<number>, minutes: pulumi.Input<number>, nanos: pulumi.Input<number>, seconds: pulumi.Input<number> }> }>;
    readonly status?: pulumi.Input<string>;
    readonly transferSpec?: pulumi.Input<{ awsS3DataSource?: pulumi.Input<{ awsAccessKey: pulumi.Input<{ accessKeyId: pulumi.Input<string>, secretAccessKey: pulumi.Input<string> }>, bucketName: pulumi.Input<string> }>, gcsDataSink?: pulumi.Input<{ bucketName: pulumi.Input<string> }>, gcsDataSource?: pulumi.Input<{ bucketName: pulumi.Input<string> }>, httpDataSource?: pulumi.Input<{ listUrl: pulumi.Input<string> }>, objectConditions?: pulumi.Input<{ excludePrefixes?: pulumi.Input<pulumi.Input<string>[]>, includePrefixes?: pulumi.Input<pulumi.Input<string>[]>, maxTimeElapsedSinceLastModification?: pulumi.Input<string>, minTimeElapsedSinceLastModification?: pulumi.Input<string> }>, transferOptions?: pulumi.Input<{ deleteObjectsFromSourceAfterTransfer?: pulumi.Input<boolean>, deleteObjectsUniqueInSink?: pulumi.Input<boolean>, overwriteObjectsAlreadyExistingInSink?: pulumi.Input<boolean> }> }>;
}

/**
 * The set of arguments for constructing a TransferJob resource.
 */
export interface TransferJobArgs {
    readonly description: pulumi.Input<string>;
    readonly project?: pulumi.Input<string>;
    readonly schedule: pulumi.Input<{ scheduleEndDate?: pulumi.Input<{ day: pulumi.Input<number>, month: pulumi.Input<number>, year: pulumi.Input<number> }>, scheduleStartDate: pulumi.Input<{ day: pulumi.Input<number>, month: pulumi.Input<number>, year: pulumi.Input<number> }>, startTimeOfDay?: pulumi.Input<{ hours: pulumi.Input<number>, minutes: pulumi.Input<number>, nanos: pulumi.Input<number>, seconds: pulumi.Input<number> }> }>;
    readonly status?: pulumi.Input<string>;
    readonly transferSpec: pulumi.Input<{ awsS3DataSource?: pulumi.Input<{ awsAccessKey: pulumi.Input<{ accessKeyId: pulumi.Input<string>, secretAccessKey: pulumi.Input<string> }>, bucketName: pulumi.Input<string> }>, gcsDataSink?: pulumi.Input<{ bucketName: pulumi.Input<string> }>, gcsDataSource?: pulumi.Input<{ bucketName: pulumi.Input<string> }>, httpDataSource?: pulumi.Input<{ listUrl: pulumi.Input<string> }>, objectConditions?: pulumi.Input<{ excludePrefixes?: pulumi.Input<pulumi.Input<string>[]>, includePrefixes?: pulumi.Input<pulumi.Input<string>[]>, maxTimeElapsedSinceLastModification?: pulumi.Input<string>, minTimeElapsedSinceLastModification?: pulumi.Input<string> }>, transferOptions?: pulumi.Input<{ deleteObjectsFromSourceAfterTransfer?: pulumi.Input<boolean>, deleteObjectsUniqueInSink?: pulumi.Input<boolean>, overwriteObjectsAlreadyExistingInSink?: pulumi.Input<boolean> }> }>;
}
