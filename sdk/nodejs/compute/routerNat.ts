// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_router_nat.html.markdown.
 */
export class RouterNat extends pulumi.CustomResource {
    /**
     * Get an existing RouterNat resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterNatState, opts?: pulumi.CustomResourceOptions): RouterNat {
        return new RouterNat(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcp:compute/routerNat:RouterNat';

    /**
     * Returns true if the given object is an instance of RouterNat.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterNat {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterNat.__pulumiType;
    }

    public readonly drainNatIps!: pulumi.Output<string[] | undefined>;
    public readonly icmpIdleTimeoutSec!: pulumi.Output<number | undefined>;
    public readonly logConfig!: pulumi.Output<outputs.compute.RouterNatLogConfig | undefined>;
    public readonly minPortsPerVm!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly natIpAllocateOption!: pulumi.Output<string>;
    public readonly natIps!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    public readonly project!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly router!: pulumi.Output<string>;
    public readonly sourceSubnetworkIpRangesToNat!: pulumi.Output<string>;
    public readonly subnetworks!: pulumi.Output<outputs.compute.RouterNatSubnetwork[] | undefined>;
    public readonly tcpEstablishedIdleTimeoutSec!: pulumi.Output<number | undefined>;
    public readonly tcpTransitoryIdleTimeoutSec!: pulumi.Output<number | undefined>;
    public readonly udpIdleTimeoutSec!: pulumi.Output<number | undefined>;

    /**
     * Create a RouterNat resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouterNatArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterNatArgs | RouterNatState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as RouterNatState | undefined;
            inputs["drainNatIps"] = state ? state.drainNatIps : undefined;
            inputs["icmpIdleTimeoutSec"] = state ? state.icmpIdleTimeoutSec : undefined;
            inputs["logConfig"] = state ? state.logConfig : undefined;
            inputs["minPortsPerVm"] = state ? state.minPortsPerVm : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["natIpAllocateOption"] = state ? state.natIpAllocateOption : undefined;
            inputs["natIps"] = state ? state.natIps : undefined;
            inputs["project"] = state ? state.project : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["router"] = state ? state.router : undefined;
            inputs["sourceSubnetworkIpRangesToNat"] = state ? state.sourceSubnetworkIpRangesToNat : undefined;
            inputs["subnetworks"] = state ? state.subnetworks : undefined;
            inputs["tcpEstablishedIdleTimeoutSec"] = state ? state.tcpEstablishedIdleTimeoutSec : undefined;
            inputs["tcpTransitoryIdleTimeoutSec"] = state ? state.tcpTransitoryIdleTimeoutSec : undefined;
            inputs["udpIdleTimeoutSec"] = state ? state.udpIdleTimeoutSec : undefined;
        } else {
            const args = argsOrState as RouterNatArgs | undefined;
            if (!args || args.natIpAllocateOption === undefined) {
                throw new Error("Missing required property 'natIpAllocateOption'");
            }
            if (!args || args.router === undefined) {
                throw new Error("Missing required property 'router'");
            }
            if (!args || args.sourceSubnetworkIpRangesToNat === undefined) {
                throw new Error("Missing required property 'sourceSubnetworkIpRangesToNat'");
            }
            inputs["drainNatIps"] = args ? args.drainNatIps : undefined;
            inputs["icmpIdleTimeoutSec"] = args ? args.icmpIdleTimeoutSec : undefined;
            inputs["logConfig"] = args ? args.logConfig : undefined;
            inputs["minPortsPerVm"] = args ? args.minPortsPerVm : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["natIpAllocateOption"] = args ? args.natIpAllocateOption : undefined;
            inputs["natIps"] = args ? args.natIps : undefined;
            inputs["project"] = args ? args.project : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["router"] = args ? args.router : undefined;
            inputs["sourceSubnetworkIpRangesToNat"] = args ? args.sourceSubnetworkIpRangesToNat : undefined;
            inputs["subnetworks"] = args ? args.subnetworks : undefined;
            inputs["tcpEstablishedIdleTimeoutSec"] = args ? args.tcpEstablishedIdleTimeoutSec : undefined;
            inputs["tcpTransitoryIdleTimeoutSec"] = args ? args.tcpTransitoryIdleTimeoutSec : undefined;
            inputs["udpIdleTimeoutSec"] = args ? args.udpIdleTimeoutSec : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(RouterNat.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RouterNat resources.
 */
export interface RouterNatState {
    readonly drainNatIps?: pulumi.Input<pulumi.Input<string>[]>;
    readonly icmpIdleTimeoutSec?: pulumi.Input<number>;
    readonly logConfig?: pulumi.Input<inputs.compute.RouterNatLogConfig>;
    readonly minPortsPerVm?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly natIpAllocateOption?: pulumi.Input<string>;
    readonly natIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
    readonly router?: pulumi.Input<string>;
    readonly sourceSubnetworkIpRangesToNat?: pulumi.Input<string>;
    readonly subnetworks?: pulumi.Input<pulumi.Input<inputs.compute.RouterNatSubnetwork>[]>;
    readonly tcpEstablishedIdleTimeoutSec?: pulumi.Input<number>;
    readonly tcpTransitoryIdleTimeoutSec?: pulumi.Input<number>;
    readonly udpIdleTimeoutSec?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a RouterNat resource.
 */
export interface RouterNatArgs {
    readonly drainNatIps?: pulumi.Input<pulumi.Input<string>[]>;
    readonly icmpIdleTimeoutSec?: pulumi.Input<number>;
    readonly logConfig?: pulumi.Input<inputs.compute.RouterNatLogConfig>;
    readonly minPortsPerVm?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly natIpAllocateOption: pulumi.Input<string>;
    readonly natIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     */
    readonly project?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
    readonly router: pulumi.Input<string>;
    readonly sourceSubnetworkIpRangesToNat: pulumi.Input<string>;
    readonly subnetworks?: pulumi.Input<pulumi.Input<inputs.compute.RouterNatSubnetwork>[]>;
    readonly tcpEstablishedIdleTimeoutSec?: pulumi.Input<number>;
    readonly tcpTransitoryIdleTimeoutSec?: pulumi.Input<number>;
    readonly udpIdleTimeoutSec?: pulumi.Input<number>;
}
