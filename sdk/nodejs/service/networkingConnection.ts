// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class NetworkingConnection extends pulumi.CustomResource {
    /**
     * Get an existing NetworkingConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkingConnectionState, opts?: pulumi.CustomResourceOptions): NetworkingConnection {
        return new NetworkingConnection(name, <any>state, { ...opts, id: id });
    }

    public readonly network: pulumi.Output<string>;
    public readonly reservedPeeringRanges: pulumi.Output<string[]>;
    public readonly service: pulumi.Output<string>;

    /**
     * Create a NetworkingConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkingConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkingConnectionArgs | NetworkingConnectionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: NetworkingConnectionState = argsOrState as NetworkingConnectionState | undefined;
            inputs["network"] = state ? state.network : undefined;
            inputs["reservedPeeringRanges"] = state ? state.reservedPeeringRanges : undefined;
            inputs["service"] = state ? state.service : undefined;
        } else {
            const args = argsOrState as NetworkingConnectionArgs | undefined;
            if (!args || args.network === undefined) {
                throw new Error("Missing required property 'network'");
            }
            if (!args || args.reservedPeeringRanges === undefined) {
                throw new Error("Missing required property 'reservedPeeringRanges'");
            }
            if (!args || args.service === undefined) {
                throw new Error("Missing required property 'service'");
            }
            inputs["network"] = args ? args.network : undefined;
            inputs["reservedPeeringRanges"] = args ? args.reservedPeeringRanges : undefined;
            inputs["service"] = args ? args.service : undefined;
        }
        super("gcp:service/networkingConnection:NetworkingConnection", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkingConnection resources.
 */
export interface NetworkingConnectionState {
    readonly network?: pulumi.Input<string>;
    readonly reservedPeeringRanges?: pulumi.Input<pulumi.Input<string>[]>;
    readonly service?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkingConnection resource.
 */
export interface NetworkingConnectionArgs {
    readonly network: pulumi.Input<string>;
    readonly reservedPeeringRanges: pulumi.Input<pulumi.Input<string>[]>;
    readonly service: pulumi.Input<string>;
}
