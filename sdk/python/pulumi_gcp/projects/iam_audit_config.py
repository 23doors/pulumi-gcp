# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class IAMAuditConfig(pulumi.CustomResource):
    audit_log_configs: pulumi.Output[list]
    etag: pulumi.Output[str]
    project: pulumi.Output[str]
    service: pulumi.Output[str]
    def __init__(__self__, __name__, __opts__=None, audit_log_configs=None, project=None, service=None):
        """
        Create a IAMAuditConfig resource with the given unique name, props, and options.
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[list] audit_log_configs
        :param pulumi.Input[str] project
        :param pulumi.Input[str] service
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not audit_log_configs:
            raise TypeError('Missing required property audit_log_configs')
        __props__['audit_log_configs'] = audit_log_configs

        __props__['project'] = project

        if not service:
            raise TypeError('Missing required property service')
        __props__['service'] = service

        __props__['etag'] = None

        super(IAMAuditConfig, __self__).__init__(
            'gcp:projects/iAMAuditConfig:IAMAuditConfig',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

